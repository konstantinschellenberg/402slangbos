mutate(turnover = as.numeric(a!=b) + as.numeric(b!=c)) %>%
st_set_geometry(sfc)
turnover
a = 0
b=1
a!=b
a!=b %>% as.numeric()
a!=b + a!=b
as.numeric(a!=b+)
as.numeric(a!=b+a!=b)
as.numeric(a!=b) + as.numeric(a!=b)
a
b
View(turnover)
renaming = function(x){
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ NA)
}
sfc = st_geometry(data)
data = data %>% st_drop_geometry() %>% as.data.frame()
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data
data = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified")
#turnover = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedTurnovers")
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple")
renaming = function(x){
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ NA)
}
sfc = st_geometry(data)
data = data %>% st_drop_geometry() %>% as.data.frame()
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data
data[1:3]
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ 0)
renaming = function(x){
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ 0)
}
sfc = st_geometry(data)
data = data %>% st_drop_geometry() %>% as.data.frame()
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data
data[data == 0] = NA
data
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data
data = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified")
#turnover = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedTurnovers")
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple")
# gt$break_date = as.POSIXct(gt$break_date, format = "%m%Y", optional = T)
# PERFORM INTERSECTION ---------------------------------------------------------
renaming = function(x){
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ 0)
}
sfc = st_geometry(data)
data = data %>% st_drop_geometry() %>% as.data.frame()
data[data == 0] = NA
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data
data = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified")
#turnover = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedTurnovers")
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple")
renaming = function(x){
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ 0)
}
sfc = st_geometry(data)
data = data %>% st_drop_geometry() %>% as.data.frame()
data[data == 0] = NA
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
View(data)
data = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified")
#turnover = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedTurnovers")
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple")
# gt$break_date = as.POSIXct(gt$break_date, format = "%m%Y", optional = T)
# PERFORM INTERSECTION ---------------------------------------------------------
renaming = function(x){
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ 0)
}
sfc = st_geometry(data)
data = data %>% st_drop_geometry() %>% as.data.frame()
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data[data == 0] = NA
data
turnover = data %>%
mutate(turnover = as.numeric(a!=b) + as.numeric(b!=c)) %>%
st_set_geometry(sfc)
turnover
View(turnover)
as.numeric(NA)
as.numeric(NA+1)
F + T
F
F - T
F * T
F*2
F*3
F+3
F+4
T+4
turnover = data %>%
mutate(turnover = case_when(as.numeric(a!=b) + as.numeric(b!=c))) %>%
st_set_geometry(sfc)
turnover = data %>%
mutate(turnover = case_when(is.na(a) ~ as.numeric(a!=b) + as.numeric(b!=c))) %>%
st_set_geometry(sfc)
turnover
View(turnover)
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b) ~ as.numeric(a!=b) + as.numeric(b!=c))) %>%
st_set_geometry(sfc)
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c))) %>%
st_set_geometry(sfc)
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c))) %>%
st_set_geometry(sfc) %>% print
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
st_set_geometry(sfc) %>% print
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
st_set_geometry(sfc)
print(turnover, n = 50)
options(max.print = 100)
print(turnover, n = 50)
turnover
View(turnover)
data
data[data == is.na(data)]
data[data == NA]
data[data == 3]
data[data == "hallo"]
data
data = sample(data, 100)
data = sample_n(data, 100)
data
View(datqa)
View(data)
data = sample_n(data, 100) %>% print
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
st_set_geometry(sfc)
data = sample_n(data, 100) %>% print
as.numeric(a!=b)
as.numeric(a!=b) + as.numeric(b!=c)
c=2
as.numeric(a!=b) + as.numeric(b!=c)
a!=NA
data = sample_n(data, 100) %>% print
data
data[[1,1]]
data[[1,1]] = NA
data
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
st_set_geometry(sfc) %>% print
data
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
st_set_geometry(sfc) %>% print
turnover = data %>%
mutate(turnover = case_when(!is.na(a|b|c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
#st_set_geometry(sfc)
print
turnover = data %>%
mutate(turnover = case_when(!is.na(a&b&c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
#st_set_geometry(sfc)
print
data = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified")
#turnover = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedTurnovers")
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple")
# gt$break_date = as.POSIXct(gt$break_date, format = "%m%Y", optional = T)
# PERFORM INTERSECTION ---------------------------------------------------------
renaming = function(x){
case_when(x == "Pasture" ~ 1,
x == "Fallow" ~ 2,
x == "Crops" ~ 3,
x == "X" ~ 0)
}
sfc = st_geometry(data)
data = data %>% st_drop_geometry() %>% as.data.frame()
# index the crop type columns
data[1:3] = map_df(data[1:3], ~ renaming(.x))
data[data == 0] = NA
# data = sample_n(data, 100) %>% print
# data[[1,1]] = NA
turnover = data %>%
mutate(turnover = case_when(!is.na(a&b&c) ~ as.numeric(a!=b) + as.numeric(b!=c),
is.na(a) ~ as.numeric(b!=c),
is.na(b) ~ as.numeric(a!=c),
is.na(c) ~ as.numeric(a!=b))) %>%
st_set_geometry(sfc)
View(turnover)
inter = st_intersection(gt, turnover)
inter
plot(inter)
plot(inter$class_simple, inter$turnover)
st_write(inter, "02_features/Ladybrand_CropData.gpkg", layer = "SampleIntersection", append = FALSE)
inter
mapview(inter)
?st_intersection
?st_join
inter = st_join(gt, turnover, join = st_intersects)
inter
mapview(inter)
library(sf)
library(tidyverse)
library(raster)
library(ggplot2)
library(plotly)
library(exactextractr)
options(max.print = 200)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
source("D:/Geodaten/Master/projects/402slangbos/import.R")
source('~/.active-rstudio-document', echo=TRUE)
path = paste(banddir, raster, collapse = "")
banddir = "F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH/results/"
raster = "stack_35JMH_ndvi.img"
path = paste(banddir, raster, collapse = "")
path
path = paste(banddir, raster, sep = "")
path
#load raster
ras = brick(path)
library(sf)
library(tidyverse)
library(raster)
library(ggplot2)
library(plotly)
library(exactextractr)
options(max.print = 200)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
#load raster
ras = brick(path)
names(ras)
source('D:/Geodaten/Master/projects/402slangbos/import.R', echo=TRUE)
ndvi
phrase = names(ras)
phrase
# Substring
substr(phrase, start = 12, stop = 20)
# Substring
substr(phrase, start = 12, stop = 19)
# Substring
phrase.date = substr(phrase, start = 12, stop = 19)
# convert to POSTict (R-date) format
phrase.date = as.POSIXct(phrase.datum, tryFormats = "Y%m%d%")
# Substring
phrase.datum = substr(phrase, start = 12, stop = 19)
# convert to POSTict (R-date) format
phrase.date = as.POSIXct(phrase.datum, tryFormats = "Y%m%d%")
phrase.datum
as.POSIXct()
?as.POSIXct()
phrase.datum
# convert to POSTict (R-date) format
phrase.date = as.POSIXct(phrase.datum, tryFormats = "Y%m%d%")
# convert to POSTict (R-date) format
phrase.date = as.POSIXct(x = phrase.datum, tryFormats = "Y%m%d%")
phrase.datum
class(phrase.datum)
# convert to POSTict (R-date) format
phrase.date = as.POSIXct(x = phrase.datum[1], tryFormats = "Y%m%d%")
# convert to POSTict (R-date) format
as.POSIXct(x = phrase.datum[1], tryFormats = "Y%m%d%")
phrase.datum[1]
# convert to POSTict (R-date) format
as.POSIXct(x = phrase.datum[1], format = "Y%m%d%")
# convert to POSTict (R-date) format
as.POSIXct(x = phrase.datum, format = "Y%m%d%")
phrase.datum
# convert to POSTict (R-date) format
as.POSIXct(x = phrase.datum, format = "YYYYmmdd")
# convert to POSTict (R-date) format
as.POSIXct(phrase.datum, format = "Y%m%d%")
# convert to POSTict (R-date) format
as.POSIXct(phrase.datum[1], format = "Y%m%d%")
# convert to POSTict (R-date) format
as.Date(phrase.datum[1], format = "Y%m%d%")
# convert to POSTict (R-date) format
as.Date(phrase.datum[1], "Y%m%d%")
phrase.datum[1]
?as.Date
# convert to POSTict (R-date) format
as.Date(phrase.datum[1], "Y%m%d%")
as.Date (date, format = "Y%-m%-d%")
date = "2015-05-12"
as.Date(date, format = "Y%-m%-d%")
date
as.Date(date, format = "y%-m%-d%")
as.Date(date, format = "Y%-m%-d%")
# convert to POSTict (R-date) format
as.Date(phrase.datum[1], "Y%m%d%", tryFormats = c("Y%m%d%"))
# convert to POSTict (R-date) format
as.Date(phrase.datum[1], "%Y%m%d")
# convert to POSTict (R-date) format
as.POSIXct(phrase.datum, "%Y%m%d")
# convert to POSTict (R-date) format
as.POSIXct(phrase.datum, format = "%Y%m%d")
# convert to POSTict (R-date) format
as.Date(phrase.datum, format = "%Y%m%d")
# convert to POSTict (R-date) format
as.Date(phrase.datum, format = "%Y%m%d") %>% class
# convert to POSTict (R-date) format
phrase.date = as.Date(phrase.datum, format = "%Y%m%d")
phrase.date %>%
as.character()
library(stringr)
phrase.chr = phrase.date %>%
as.character()
stringr::str_replace(phrase.chr, "-", ".")
?str_replace
str_replace(fruits, "([aeiou])", "")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
stringr::str_replace_all(phrase.chr, "-", ".")
# convert to POSTict (R-date) format
phrase.date = as.Date(phrase.datum, format = "%Y%m%d") %>%
as.character() %>%
stringr::str_replace_all("-", ".")
vector("character", length = length(phrase))
n = vector("character", length = length(phrase))
prefix = "ndvi"
# convert to POSTict (R-date) format
phrase.date = as.Date(phrase.datum, format = "%Y%m%d") %>%
as.character() %>%
stringr::str_replace_all("-", ".")
prepend(phrase.date, prefix)
map(phrase.date, function(x) paste0(prefix, x))
map_chr(phrase.date, function(x) paste0(prefix, x))
map_chr(phrase.date, function(x) paste0(prefix, ".", x))
write.csv(bandnames, file = paste0(rasterdir, paste0("bandnames_", prefix)), row.names = FALSE)
# prepend the prefix to date information
bandnames = map_chr(phrase.date, function(x) paste0(prefix, ".", x))
write.csv(bandnames, file = paste0(rasterdir, paste0("bandnames_", prefix)), row.names = FALSE)
rasterdir = "F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH/results/"
raster = "stack_35JMH_ndvi.img"
path = paste(rasterdir, raster, sep = "")
prefix = "ndvi"
# load raster
ras = brick(path)
phrase = names(ras) # get names
# Substring
phrase.datum = substr(phrase, start = 12, stop = 19)
# convert to POSTict (R-date) format
phrase.date = as.Date(phrase.datum, format = "%Y%m%d") %>%
as.character() %>%
stringr::str_replace_all("-", ".")
# prepend the prefix to date information
bandnames = map_chr(phrase.date, function(x) paste0(prefix, ".", x))
write.csv(bandnames, file = paste0(rasterdir, paste0("bandnames_", prefix)), row.names = FALSE)
write.csv(bandnames, file = paste0(rasterdir, paste0("bandnames_", prefix), ".txt"), row.names = FALSE)
source('D:/Geodaten/Master/projects/402slangbos/preprocession/date_formatting.R', echo=TRUE)
bandnames
source('D:/Geodaten/Master/projects/402slangbos/preprocession/date_formatting.R', echo=TRUE)
library(sf)
library(tidyverse)
library(raster)
library(ggplot2)
library(plotly)
library(exactextractr)
options(max.print = 200)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
source("D:/Geodaten/Master/projects/402slangbos/import.R")
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple") %>%
st_zm()
gt = gt %>%
group_by(class_simple) %>%
mutate(id = row_number())
# metadata
col_class = "class_simple"
col_id = "id"
rasterdir = "F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH/results/"
raster = "stack_35JMH_ndvi.img"
path = paste(rasterdir, raster, sep = "")
prefix = "ndvi"
# load raster
ras = brick(path)
phrase = names(ras) # get names
ndvi = ras
ndvi
names)
# Substring
phrase.datum = substr(phrase, start = 12, stop = 19)
# load raster
ras = brick(path)
phrase = names(ras) # get names
# Substring
phrase.datum = substr(phrase, start = 12, stop = 19)
# convert to POSTict (R-date) format
phrase.date = as.Date(phrase.datum, format = "%Y%m%d") %>%
as.character() %>%
stringr::str_replace_all("-", ".")
# prepend the prefix to date information
bandnames = map_chr(phrase.date, function(x) paste0(prefix, ".", x))
names(ndvi) = bandnames
ndvi
# metadata
col_class = "class_simple"
col_id = "id"
dstdir = "03_develop/extract/"
rasters = list(ndvi)
outfiles = sapply(c("ndvi"), function(x) paste("extract", x, sep = "_"))
outfile = "test"
statistics = c("mean", "stdev", "count") # must be coercable by exact_extract()
for (i in seq_along(outfiles)){
exactextracting(gt = gt, ras = rasters[[i]],
col_class = "class_simple",
col_id = "id",
statistics = statistics,
dstdir = dstdir,
outfile = outfiles[i])
}
co = readRDS("03_develop/extract/extract_ndvi")
co
map(co[[1]], ~ sum(is.na(.x)))
is.na(o)
o = co[[5]][[15]]
is.na(o)
o[is.na(o)] = NA
ggplot(o) +
geom_point(aes(date, mean)) +
geom_line(aes(date, med)) +
geom_ribbon(aes(date, ymin = mean - stdev, ymax = mean + stdev)) +
geom_line(aes(date, med), color = "red") +
theme_bw()
o
View(co)
co[[1]][["44"]][["med"]]
o = co[[1]][[44]]
is.na(o)
o[is.na(o)] = NA
ggplot(o) +
geom_point(aes(date, mean)) +
geom_line(aes(date, med)) +
geom_ribbon(aes(date, ymin = mean - stdev, ymax = mean + stdev)) +
geom_line(aes(date, med), color = "red") +
theme_bw()
plot_ly(o) %>% plotly::add_lines(x = ~date, y= ~med, connectgaps = F)
ggplot(o) +
geom_point(aes(date, mean)) +
geom_line(aes(date, med)) +
geom_ribbon(aes(date, ymin = mean - stdev, ymax = mean + stdev)) +
geom_line(aes(date, med), color = "red") +
theme_bw()
ggplot(o) +
geom_point(aes(date, med)) +
geom_line(aes(date, med)) +
geom_ribbon(aes(date, ymin = mean - stdev, ymax = mean + stdev)) +
geom_line(aes(date, med), color = "red") +
theme_bw()
ggplot(o) +
geom_point(aes(date, med)) +
geom_line(aes(date, med)) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev)) +
geom_line(aes(date, med), color = "red") +
theme_bw()
