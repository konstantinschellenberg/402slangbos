# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(sample$date, sample$med), color = "darkgrey") +
geom_line(aes(sample$date, sample$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
sample = map(sample, ~ na.omit(.x))
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(sample$date, sample$med), color = "darkgrey") +
geom_line(aes(sample$date, sample$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = map(sample, ~ na.omit(.x))
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = map(sample, ~ na.omit(.x))
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = name)
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 2)
})
# transformation coefficient
s = map(sample, ~ na.omit(.x))
s
# transformation coefficient
s = map_df(sample, ~ na.omit(.x))
s
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = map_df(sample, ~ na.omit(.x))
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = map_df(sample, ~ na.omit(.x))
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = name)
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 2)
})
sample
sensor
classes
# transformation coefficient
s = na.omit(sample)
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = na.omit(sample)
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = name)
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 2)
})
map2(extract, layernames, function(extr, lnames){
sensor_used = lnames
sensor = extr
helper.table = master %>% filter(sensor == sensor_used)
s.min = min(helper.table$med_smooth, na.rm = TRUE)
s.max = max(helper.table$med_smooth, na.rm = TRUE)
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = na.omit(sample)
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab("VH backscatter")+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = name)
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 2)
})
proper_layernames.axis
layernames
View(extract)
t
proper_layernames = c("Sentinel-1 VV Coherence", "Sentinel-2 DVI", "Sentinel-2 EVI", "Sentinel-2 MSAVI", "Sentinel-2 NDVI",
"Sentinel-2 REIP", "Sentinel-2 RVI", "Sentinel-1 VH", "Sentinel-1 VV")
proper_layernames.axis = c("S-1 VV Coherence", "S-2 DVI Index", "S-2 EVI Index", "S-2 MSAVI Index",
"S-2 NDVI Index", "S-2 REIP Index", "S-2 RVI Index", "S-1 VH [dB]", "S-1 VV [dB]")
proper_layernames
name
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = na.omit(sample)
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab(plnames.axis)+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = paste(proper_layernames, name))
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 2)
})
pmap(list(extract, layernames, proper_layernames.axis, proper_layernames),
function(extr, lnames, plnames.axis, plnames){
sensor_used = lnames
sensor = extr
helper.table = master %>% filter(sensor == sensor_used)
s.min = min(helper.table$med_smooth, na.rm = TRUE)
s.max = max(helper.table$med_smooth, na.rm = TRUE)
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = na.omit(sample)
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab(plnames.axis)+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = paste(proper_layernames, name))
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 2)
})
pmap(list(extract, layernames, proper_layernames.axis, proper_layernames),
function(extr, lnames, plnames.axis, plnames){
sensor_used = lnames
sensor = extr
helper.table = master %>% filter(sensor == sensor_used)
s.min = min(helper.table$med_smooth, na.rm = TRUE)
s.max = max(helper.table$med_smooth, na.rm = TRUE)
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = na.omit(sample)
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab(plnames.axis)+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = paste(proper_layernames, name))
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 2)
})
pmap(list(extract, layernames, proper_layernames.axis, proper_layernames),
function(extr, lnames, plnames.axis, plnames){
sensor_used = lnames
sensor = extr
helper.table = master %>% filter(sensor == sensor_used)
s.min = min(helper.table$med_smooth, na.rm = TRUE)
s.max = max(helper.table$med_smooth, na.rm = TRUE)
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = na.omit(sample)
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab(plnames.axis)+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = paste(proper_layernames, name))
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 1)
})
pmap(list(extract, layernames, proper_layernames.axis, proper_layernames),
function(extr, lnames, plnames.axis, plnames){
sensor_used = lnames
sensor = extr
helper.table = master %>% filter(sensor == sensor_used)
s.min = min(helper.table$med_smooth, na.rm = TRUE)
s.max = max(helper.table$med_smooth, na.rm = TRUE)
map2(sensor, classnames, function(classes, name){
# map inputs
sample.nr = 1:length(classes)
cat(sample.nr)
plts = map2(classes, sample.nr, function(sample, sn){
# transformation coefficient
s = na.omit(sample)
# gg = rbindlist(input, idcol = "sensors", use.names = TRUE) %>%
#     na.omit()
# PLOTLY TRY
# plot_ly() %>%
#     add_lines(data = g1, x = ~ date, y = ~ g1$med, yaxis = "y1", line = vh.fmt) %>%
#     # add_lines(data = g2, x = ~ date, y = ~ g2$med, yaxis = "y2", line = red.fmt) %>%
#     layout(xaxis = date.axis,
#            yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
#            yaxis2 = y.s2_2,
#            showlegend = F,
#            margin = list(pad = 0, b = 50, l = 0, r = 50, automargin = TRUE),
#            title = paste("No.", "<b>", sn))
# GGPLOT TRY
ggplot() +
geom_line(aes(s$date, s$med), color = "darkgrey") +
geom_line(aes(s$date, s$med_smooth), color = "black") +
# geom_line(aes(g2$date, g2$med), color = "darkgreen") +
# scale_y_continuous(name = "first", sec.axis = sec_axis(trans = ~ . -50, name = "ndvi")) +
theme_minimal() +
xlab("date")+
ylab(plnames.axis)+
ylim(c(s.min, s.max)) +
ggtitle(paste("No.:", sn))
})
p1 = plts[[1]]; p2 = plts[[2]]
p1
# plotly
# subplot(plts, shareX = TRUE, nrows = 5)
g1 = marrangeGrob(plts, nrow = 5, ncol = 10, top = paste(plnames, name))
ggsave(paste0(sensor_used, "_", name, ".png"), plot = g1, path = paste0(plotdir, "Samples/Facets/"), device = "png",
scale = 1)
})
