line = list(
color = "grey80",
width = 0.2
))) %>%
add_markers(data = savi, x = ~ date, y = ~ median,
yaxis = "y3", name = "SAVI",
opacity = 0.8,
marker = list(
color = "black",
size = size_markers,
line = list(
color = "grey80",
width = 0.2
))) %>%
# smoothed lines
add_lines(data = vh, x = ~ date, y = ~ med_smooth,
yaxis = "y1", name = "S-1 VH backscatter smoothed", line = vh.fmt) %>%
add_lines(data = co, x = ~ date, y = ~ med_smooth,
yaxis = "y2", name = "S-1 VV coherence smoothed (2-weeks interval)", line = red.fmt,
connectgaps = F) %>%
# median lines
add_lines(data = vh, x = ~ date, y = ~ median,
yaxis = "y1", name = "S-1 VH backscatter", line = vh.fmt.slim) %>%
add_lines(data = co, x = ~ date, y = ~ median,
yaxis = "y2", name = "S-1 VV coherence (2-weeks interval)", line = red.fmt.slim,
connectgaps = F) %>%
layout(xaxis = date.axis,
yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
yaxis2 = y.co_2,
yaxis3 = y.ndvi_savi,
yaxis4 = y.savi,
legend = list(font = f1, orientation = "h", xanchor = "center", yanchor = "bottom", y = -0.7, x = 0.5),
margin = list(pad = 0, b = 200, l = 0, r = 120, automargin = TRUE),
title = classnames)
plt
plts11 = plots11(summary_all[["vh"]], summary[["co"]], summary[["ndvi"]], summary[["savi"]])
plts11
vh = summary_all[["vh"]]
ggplot(summary[["ndvi"]][[1]]) +
geom_line(aes(date, median))
plotly::orca(plts11, file = paste0(plotdir, "Summary Statistics/Comparing/", .y, "_INC-CON_bscVH-cohVV-NDVI-SAVI.png"), scale = 3))
plotly::orca(plts11, file = paste0(plotdir, "Summary Statistics/Comparing/", .y, "_INC-CON_bscVH-cohVV-NDVI-SAVI.png"), scale = 3)
plotly::orca(plts11, file = paste0(plotdir, "Summary Statistics/Comparing/", "INC-CON_bscVH-cohVV-NDVI-SAVI.png"), scale = 3)
plts11
plts11 = plots11(summary_all[["vh"]], summary[["co"]], summary[["ndvi"]], summary[["savi"]])
plots11 = function(in.vh, in.co, in.ndvi, in.savi){
rasters = list(in.vh, in.co, in.ndvi, in.savi)
in.names = c("vh", "co", "ndvi", "savi")
# fiter these classes
# Increase + Continuous
classes = c(1, 2)
# define averaging function
fuse_data = function(ras, classes){
r1 = ras[[classes[1]]]
r2 = ras[[classes[2]]]
# get dates col
date = r1$date
r1 = r1 %>% dplyr::select(-date)
r2 = r2 %>% dplyr::select(-date)
# averaging
r = map2_df(r1, r2, function(x, y){
(x + y) / 2
})
r = r %>% mutate(date = date)
}
# action average between classes
data = map(rasters, function(x){
fuse_data(x, classes)
})
names(data) = in.names
# redefine layers
vh = data[["vh"]]
co = data[["co"]]
ndvi = data[["ndvi"]]
savi = data[["savi"]]
size_markers = 3
# calculate range min-max
vh_max = max(vh$median)
vh_min = min(vh$median)
ndvi_max = max(ndvi$median)
ndvi_min = min(ndvi$median)
savi_max = max(savi$median)
savi_min = min(savi$median)
co_max = max(co$median)
co_min = min(co$median)
print(vh_max);print(vh_min)
print(co_max);print(co_min)
plt = plot_ly(width = 700, height = 500) %>%
# Sentinel-2 markers
add_markers(data = ndvi, x = ~ date, y = ~ median,
yaxis = "y3", name = "NDVI",
opacity = 0.8,
marker = list(
color = "#017a32",
size = size_markers,
line = list(
color = "grey80",
width = 0.2
))) %>%
add_markers(data = savi, x = ~ date, y = ~ median,
yaxis = "y3", name = "SAVI",
opacity = 0.8,
marker = list(
color = "black",
size = size_markers,
line = list(
color = "grey80",
width = 0.2
))) %>%
# smoothed lines
add_lines(data = vh, x = ~ date, y = ~ med_smooth,
yaxis = "y1", name = "S-1 VH backscatter smoothed", line = vh.fmt) %>%
add_lines(data = co, x = ~ date, y = ~ med_smooth,
yaxis = "y2", name = "S-1 VV coherence smoothed (2-weeks interval)", line = red.fmt,
connectgaps = F) %>%
# median lines
add_lines(data = vh, x = ~ date, y = ~ median,
yaxis = "y1", name = "S-1 VH backscatter", line = vh.fmt.slim) %>%
add_lines(data = co, x = ~ date, y = ~ median,
yaxis = "y2", name = "S-1 VV coherence (2-weeks interval)", line = red.fmt.slim,
connectgaps = F) %>%
layout(xaxis = date.axis,
yaxis = c(y.s1, range = list(c(vh_min, vh_max))),
yaxis2 = y.co_2,
yaxis3 = y.ndvi_savi,
yaxis4 = y.savi,
legend = list(font = f1, orientation = "h", xanchor = "center", yanchor = "bottom", y = -0.7, x = 0.5),
margin = list(pad = 0, b = 200, l = 0, r = 120, automargin = TRUE),
title = classnames)
}
plts11 = plots11(summary_all[["vh"]], summary[["co"]], summary[["ndvi"]], summary[["savi"]])
plts11
plots11 = function(in.vh, in.co, in.ndvi, in.savi){
rasters = list(in.vh, in.co, in.ndvi, in.savi)
in.names = c("vh", "co", "ndvi", "savi")
# fiter these classes
# Increase + Continuous
classes = c(1, 2)
# define averaging function
fuse_data = function(ras, classes){
r1 = ras[[classes[1]]]
r2 = ras[[classes[2]]]
# get dates col
date = r1$date
r1 = r1 %>% dplyr::select(-date)
r2 = r2 %>% dplyr::select(-date)
# averaging
r = map2_df(r1, r2, function(x, y){
(x + y) / 2
})
r = r %>% mutate(date = date)
}
# action average between classes
data = map(rasters, function(x){
fuse_data(x, classes)
})
names(data) = in.names
# redefine layers
vh = data[["vh"]]
co = data[["co"]]
ndvi = data[["ndvi"]]
savi = data[["savi"]]
size_markers = 3
# calculate range min-max
vh_max = max(vh$median)
vh_min = min(vh$median)
ndvi_max = max(ndvi$median)
ndvi_min = min(ndvi$median)
savi_max = max(savi$median)
savi_min = min(savi$median)
co_max = max(co$median)
co_min = min(co$median)
print(vh_max);print(vh_min)
print(co_max);print(co_min)
plt = plot_ly(width = 700, height = 500) %>%
# Sentinel-2 markers
add_markers(data = ndvi, x = ~ date, y = ~ median,
yaxis = "y3", name = "NDVI",
opacity = 0.8,
marker = list(
color = "#017a32",
size = size_markers,
line = list(
color = "grey80",
width = 0.2
))) %>%
add_markers(data = savi, x = ~ date, y = ~ median,
yaxis = "y3", name = "SAVI",
opacity = 0.8,
marker = list(
color = "black",
size = size_markers,
line = list(
color = "grey80",
width = 0.2
))) %>%
# smoothed lines
add_lines(data = vh, x = ~ date, y = ~ med_smooth,
yaxis = "y1", name = "S-1 VH backscatter smoothed", line = vh.fmt) %>%
add_lines(data = co, x = ~ date, y = ~ med_smooth,
yaxis = "y2", name = "S-1 VV coherence smoothed (2-weeks interval)", line = red.fmt,
connectgaps = F) %>%
# median lines
add_lines(data = vh, x = ~ date, y = ~ median,
yaxis = "y1", name = "S-1 VH backscatter", line = vh.fmt.slim) %>%
add_lines(data = co, x = ~ date, y = ~ median,
yaxis = "y2", name = "S-1 VV coherence (2-weeks interval)", line = red.fmt.slim,
connectgaps = F) %>%
layout(xaxis = date.axis,
yaxis = c(y.s1, range = list(c(-24, -14))),
yaxis2 = y.co_2,
yaxis3 = y.ndvi_savi,
yaxis4 = y.savi,
legend = list(font = f1, orientation = "h", xanchor = "center", yanchor = "bottom", y = -0.7, x = 0.5),
margin = list(pad = 0, b = 200, l = 0, r = 120, automargin = TRUE),
title = classnames)
}
plts11 = plots11(summary_all[["vh"]], summary[["co"]], summary[["ndvi"]], summary[["savi"]])
plts11
plotly::orca(plts11, file = paste0(plotdir, "Summary Statistics/Comparing/", "INC-CON_bscVH-cohVV-NDVI-SAVI.png"), scale = 3)
library(sf)
library(raster)
p.chp14 = "F:/geodata/geo402/CHIRPS/FreeState_Ladybrand_14days_2015_2020.tif"
p.chpD = "F:/geodata/geo402/CHIRPS/FreeState_Ladybrand_daily_2015-.tif"
p.chpM = "F:/geodata/geo402/CHIRPS/FreeState_Ladybrand_monthly_2015_2020.tif"
chp14 = brick(p.chp14)
chpM = brick(p.chpM)
chpD = brick(p.chpD)
plot(chpD[[7]])
nlayers(chpD)
# create layernames
dates = seq(from = as.Date("2015/1/1"), by = 1, length.out = nlayers(chpD)
# create layernames
dates = seq(from = as.Date("2015/1/1"), by = 1, length.out = nlayers(chpD))
dates
tail(dates)
names(chpD) = dates
chpD
dates
names(chpD) = dates + "sd"
names(chpD) = paste0("chpD", dates)
chpD
names(chpD) = paste0("chpD.", dates)
chpD
fort = chpD %>% as.data.frame(xy = TRUE)
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = FreeState_Ladybrand_14days_2015_2020.3)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_continuous(c("black", "white")) +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.01)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_continuous(c("black", "white")) +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.05)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_continuous(c("black", "white")) +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_continuous(c("black", "white")) +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_brewer("Set1") +
theme_minimal()
scale_fill_brewer()
RColorBrewer::brewer.pal()
RColorBrewer::brewer.pal.info
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_brewer("Set1", type = "seq") +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_brewer("Oranges") +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_brewer("red") +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_brewer(palette = "Set1") +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
scale_fill_brewer() +
theme_minimal()
ggplot() +
geom_tile(data = fort, aes(x, y ,fill = chpD.2018.01.08)) +
geom_sf(data = sf::st_transform(gt, 4326)) +
theme_minimal()
S1_acquisition_dates = n.vh %>%
read_csv() %>%
.$x %>%
substring(first = 4) %>%
as.Date(format = "%Y.%m.%d")
df_S1_acquisition_dates = S1_acquisition_dates %>%
as.data.frame() %>%
`names<-`("acqu_date_S1")
names(S1_acquisition_dates) = "acqu_date_S-1"
S1_acquisition_dates
fort
View(fort)
# Grep only where is gt
exact_extract(gt, chpD)
# Grep only where is gt
exact_extract(chpD, gt)
chpD
gt
crs(gt)
st_geometry(gt)
chpD = brick(p.chpD) %>% st_transform(crs = 32732)
chpD
plot(chpD[[7]])
chpD
chpD = brick(p.chpD) %>% st_transform(crs = 32732)
chpD = brick(p.chpD) %>% raster::projectRaster(crs = 32732)
p.chpD
chpD
chpD = brick(p.chpD) %>% raster::projectRaster(from = 4326, crs = 32732)
chpD = brick(p.chpD) %>% raster::projectRaster(to = new, crs = 32732)
chpD = brick(p.chpD) %>% raster::projectRaster(to = "new", crs = 32732)
p.chp14 = "F:/geodata/geo402/CHIRPS/FreeState_Ladybrand_14days_2015_2020_32732.tif"
p.chpD = "F:/geodata/geo402/CHIRPS/FreeState_Ladybrand_daily_2015-_32732.tif"
p.chpM = "F:/geodata/geo402/CHIRPS/FreeState_Ladybrand_monthly_2015_2020_32732.tif"
chp14 = brick(p.chp14)
chpM = brick(p.chpM)
chpD = brick(p.chpD) %>% raster::projectRaster(to = "new", crs = 32732)
chp14 = brick(p.chp14)
chpM = brick(p.chpM)
chpD = brick(p.chpD)
plot(chpD[[7]])
nlayers(chpD)
# create layernames
dates = seq(from = as.Date("2015/1/1"), by = 1, length.out = nlayers(chpD))
names(chpD) = paste0("chpD.", dates)
# Point extract: Grep only where is gt
df = exact_extract(chpD, gt)
df
View(df)
df[[1]]
df[[1]] %>% View
source('D:/Geodaten/Master/projects/402slangbos/import.R', echo=TRUE)
vh
ndvi
ndvi %>% raster::NAvalue()
ndvi %>% raster::approxNA()
ndvi[[1:2]] %>% raster::approxNA()
ndvi[[1:2]] %>%  cellStats(is.na(.), sum)
cellStats(is.na(ndvi), sum)
cellStats(is.na(ndvi[[1:2]]), sum)
cellStats(is.na(ndvi[[1:5]]), sum)
cellStats(is.na(ndvi[[1:10]]), sum)
cellStats(is.na(ndvi[[1:20]]), sum)
cellStats(is.na(ndvi), sum)
na =  cellStats(is.na(cm), sum)
na =  cellStats(is.na(ndvi), sum)
na
library(raster)
library(randomForestSRC)
library(tidyverse)
library(data.table)
library(purrr)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
p.ndvi = "F:/geodata/geo402/S2/xx_S2_indices/mosaics/stack_ndvi.vrt"
n.ndvi = "F:/geodata/geo402/S2/xx_S2_indices/mosaics/stack_ndvi.txt"
ndvi =  rename_bandnames(p.ndvi, n.ndvi)
ndvi
ras = ndvi %>% brick()
dt = as.data.table.raster(ras)
dt
dt = as.data.table.raster(ras)
dt
class(dt)
gc()
library(raster)
library(randomForestSRC)
library(tidyverse)
library(data.table)
library(purrr)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
# data.table primer ------------------------------------------------------------
p.ndvi = "F:/geodata/geo402/S2/xx_S2_indices/mosaics/stack_ndvi.vrt"
n.ndvi = "F:/geodata/geo402/S2/xx_S2_indices/mosaics/stack_ndvi.txt"
ndvi =  rename_bandnames(p.ndvi, n.ndvi)
ras = ndvi %>% brick()
dt = as.data.table.raster(ras)
dt
ndvi
ras = ndvi[[1:100]] %>% brick()
dt = as.data.table.raster(ras)
path = "D:/Geodaten/#Jupiter/GEO402/01_data/land_cover/SouthAfrica_Sentinel2_LULC2016.tif"
r = brick(path)
r
r = raster(path)
r
plot(r)
path = "D:/Geodaten/#Jupiter/GEO402/01_data/land_cover/SouthAfrica_Sentinel2_LULC2016.tif"
r = raster(path)
library(raster)
library(randomForestSRC)
library(tidyverse)
library(data.table)
library(purrr)
r = raster(path)
r
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
dt = as.data.table.raster(r)
stars::read_stars(path)
p = stars::read_stars(path)
p
plot(p)
ggplot()+
geom_raster(p)
geom_raster(data = p)
ggplot()+
geom_raster(data = p, aes(x, y))
p
new = p %>% stars::is_big()
library(stars)
is_big(path)
is_big(p)
?is_big()
stars::detect.driver(path)
ggplot() + geom_stars(p)
ggplot() + geom_stars(data = p, downsample = 10)
ggplot() + geom_stars(data = p, downsample = 100)
ggplot() + geom_stars(data = p, downsample = 50)
ggplot() + geom_stars(data = p, downsample = 10000)
ggplot() + geom_stars(data = p, downsample = 1000)
ggplot() + geom_stars(data = p, downsample = 100)
p.ndvi = "F:/geodata/geo402/S2/xx_S2_indices/mosaics/stack_ndvi.vrt"
n.ndvi = "F:/geodata/geo402/S2/xx_S2_indices/mosaics/stack_ndvi.txt"
ndvi =  rename_bandnames(p.ndvi, n.ndvi)
ras = ndvi %>% read_stars()
ndvi
ras = ndvi %>% read_stars(p.ndvi)
p.ndvi
ras = read_stars(p.ndvi)
ras
plot(ras)
ras[[1]]
ras
ras[1]
ras[[1]]
ras[1][1]
stars::st_dimensions(ras)
study_area = st_read("D:/Geodaten/#Jupiter/GEO402/02_features/study_area.gpkg", layer = "final", quiet = TRUE) %>%  # read in
st_zm(drop = TRUE)  # Remove Z-Dimension
gt = st_read("D:/Geodaten/#Jupiter/GEO402/02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple") %>%
st_zm() %>%
group_by(class_simple) %>%
# CREATE RUNNING NUMBERS FOR GT
mutate(id = row_number()) %>%
dplyr::ungroup()
cgt = st_read("D:/Geodaten/#Jupiter/GEO402/02_features/features.gpkg", layer = "LADYBRAND_gt_stats_full_simple") %>%
st_zm() %>%
group_by(class_simple) %>%
# CREATE RUNNING NUMBERS FOR GT
mutate(id = row_number()) %>%
dplyr::ungroup()
?stars::st_extract()
l = stars::st_extract(st_centroid(gt))
st_centroid(gt)
points = st_centroid(gt)
gt
point
points
ras
l = stars::st_extract(points)
gt
points %>% st_as_sfc()
points %>% st_as_sf()
points %>% st_as_sf() %>% class
point_sfc = st_sf(points)
point_sfc
point_sfc %>% class
point_sfc = st_sfc(points)
geom = st_geometry(points)
geom
l = st_extract(ras, geom)
l
source('D:/Geodaten/Master/projects/402slangbos/import.R', echo=TRUE)
l = st_extract(vh, geom)
ras = read_stars(r.vh)
ras = read_stars(p.vh)
ras
plot(ras)
ras
sli = ras %>% slice(index = 1, along = band)
sli
plot(sli)
sli = ras %>% slice(index = 1:2, along = band)
plot(sli)
ggplot() +
geom_stars(sli)
ras
l = st_extract(ras, geom)
warnings()
View(l)
l
