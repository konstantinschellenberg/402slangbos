s_srs = "+proj=longlat +datum=WGS84 +no_defs",
t_srs = "+proj=utm +zone=35 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
te = c(st_bbox(study_area)),
tr = c(20, 20),
overwrite = TRUE)
}
st_read("F:/geodata/geo402/##study_area/LADYBRAND_final_enlarged_study_area.shp")
study_area = st_read("F:/geodata/geo402/##study_area/LADYBRAND_final_enlarged_study_area.shp")
resolution = c(30, 30)
# NA are 0 in the output coherences
for (a in bands){
for (i in seq_along(list.stacking)){
print(i)
file.remove(path_vrt)
file.remove(single.vrt[i])
# get single bands (many vrts)
# fetch one band according to the initial for-loop (VH and VV polarisation coherences, save as unique vrt (overridden by 2nd loop round))
gdalUtils::gdal_translate(src_dataset = list.stacking[i],
dst_dataset = single.vrt[i],
overwrite = TRUE,
of = "VRT",
b = a)
}
file.remove(path_vrt)
# summarise bands to virtual file (vrt)
gdalUtils::gdalbuildvrt(gdalfile = single.vrt,
output.vrt = path_vrt,
overwrite = TRUE,
separate = TRUE,
srcnodata = 0) # here: decide to keep 0 or replace by NA
# crop each date to study area extent, reproject to UTM 35S
gdalUtils::gdalwarp(srcfile = path_vrt,
dstfile = path_merged,
of = "ENVI",
s_srs = "+proj=longlat +datum=WGS84 +no_defs",
t_srs = "+proj=utm +zone=35 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
te = st_bbox(crop_area),
tr = resolution,
overwrite = TRUE)
}
list.stacking = list.files(path = "F:/geodata/geo402/S1_SLC/raw/S1A_IW_SLC_VV", pattern = ".tif$", full.names = TRUE)
coherence.names = list.files(path = "F:/geodata/geo402/S1_SLC/raw/S1A_IW_SLC_VV", pattern = ".tif$", full.names = FALSE)
single.vrt = coherence.names %>%
substring(., first = 1, last = nchar(.[1]) - 4) %>%
paste0("F:/geodata/geo402/S1_SLC/xx_new/VRTs/", ., ".vrt")
crop_area = st_read("F:/geodata/geo402/##study_area/LADYBRAND_final_enlarged_study_area.shp")
resolution = c(30, 30)
path_vrt = "F:/geodata/geo402/S1_SLC/xx_new/temp.vrt"
path_merged = "F:/geodata/geo402/S1_SLC/xx_new/S1A_IW_SLC_VV_stack.img"
bands = 1
a = 1
i = 1
# NA are 0 in the output coherences
for (a in bands){
for (i in seq_along(list.stacking)){
print(i)
file.remove(path_vrt)
file.remove(single.vrt[i])
# get single bands (many vrts)
# fetch one band according to the initial for-loop (VH and VV polarisation coherences, save as unique vrt (overridden by 2nd loop round))
gdalUtils::gdal_translate(src_dataset = list.stacking[i],
dst_dataset = single.vrt[i],
overwrite = TRUE,
of = "VRT",
b = a)
}
file.remove(path_vrt)
# summarise bands to virtual file (vrt)
gdalUtils::gdalbuildvrt(gdalfile = single.vrt,
output.vrt = path_vrt,
overwrite = TRUE,
separate = TRUE,
srcnodata = 0) # here: decide to keep 0 or replace by NA
# crop each date to study area extent, reproject to UTM 35S
gdalUtils::gdalwarp(srcfile = path_vrt,
dstfile = path_merged,
of = "ENVI",
s_srs = "+proj=longlat +datum=WGS84 +no_defs",
t_srs = "+proj=utm +zone=35 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
te = st_bbox(crop_area),
tr = resolution,
overwrite = TRUE)
}
warnings()
# summarise bands to virtual file (vrt)
gdalUtils::gdalbuildvrt(gdalfile = single.vrt,
output.vrt = path_vrt,
overwrite = TRUE,
separate = TRUE,
srcnodata = 0) # here: decide to keep 0 or replace by NA
# crop each date to study area extent, reproject to UTM 35S
gdalUtils::gdalwarp(srcfile = path_vrt,
dstfile = path_merged,
of = "ENVI",
s_srs = "+proj=longlat +datum=WGS84 +no_defs",
t_srs = "+proj=utm +zone=35 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
te = st_bbox(crop_area),
tr = resolution,
overwrite = TRUE)
# crop each date to study area extent, reproject to UTM 35S
gdalUtils::gdalwarp(srcfile = path_vrt,
dstfile = path_merged,
of = "ENVI",
s_srs = "+proj=longlat +datum=WGS84 +no_defs",
t_srs = "+proj=utm +zone=35 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
te = st_bbox(crop_area),
tr = resolution,
overwrite = TRUE)
crop_area
crop_area = st_read("F:/geodata/geo402/##study_area/LADYBRAND_final_enlarged_study_area.shp")
# crop each date to study area extent, reproject to UTM 35S
gdalUtils::gdalwarp(srcfile = path_vrt,
dstfile = path_merged,
of = "ENVI",
s_srs = "+proj=longlat +datum=WGS84 +no_defs",
t_srs = "+proj=utm +zone=35 +south +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
te = st_bbox(crop_area),
tr = resolution,
te_srs = "EPSG:4326",
overwrite = TRUE)
?sf::sf_project()
# crop_area to 32735
st_transform(crop_area, 32735)
utm_bbox = st_bbox(crop_area.utm)
# crop_area to 32735
crop_area.utm = st_transform(crop_area, 32735)
utm_bbox = st_bbox(crop_area.utm)
utm_bbox
command = "gdalbuildvrt -r nearest -srcnodata -99 -tr 30 30 -te 463563.4 6739018.8  549706.4 6791364.4 -input_file_list C:/Users/haken/AppData/Local/Temp/processing_tUplbu/a1eff8a32c0740ddad6938b47278f3ea/buildvrtInputFiles.txt F:/geodata/geo402/S1_GRD/xx_new/S1A_GRD_VV_stack.vrt"
system(command)
command = "gdalbuildvrt -r nearest -srcnodata -99 -tr 30 30 -te 463563.4 6739018.8  549706.4 6791364.4 -input_file_list F:/geodata/geo402/S1_GRD/xx_new/S1_A_D_VV_stack_base_period_03_2015_03_2018_free_state_tile_1 F:/geodata/geo402/S1_GRD/xx_new/S1_A_D_VV_stack_base_period_03_2015_03_2018_free_state_tile_2 F:/geodata/geo402/S1_GRD/xx_new/S1A_GRD_VV_stack.vrt"
system(command)
command = "gdalbuildvrt -r nearest -srcnodata -99 -tr 30 30 -te 463563.4 6739018.8 549706.4 6791364.4 -input_file_list
F:/geodata/geo402/S1_GRD/xx_new/S1_A_D_VV_stack_base_period_03_2015_03_2018_free_state_tile_1
F:/geodata/geo402/S1_GRD/xx_new/S1_A_D_VV_stack_base_period_03_2015_03_2018_free_state_tile_2
F:/geodata/geo402/S1_GRD/xx_new/S1A_GRD_VV_stack.vrt"
command
library(sf)
library(tidyverse)
library(raster)
library(mapview)
library(ggplot2)
options(max.print = 100, )
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_all_samples") %>%
st_zm()
plot(gt)
# classify
gt = gt %>%
filter(stats_use == TRUE) %>%
mutate(class =  case_when(new_class == "slangbos_increase_oldfield" ~ "11",
new_class == "slangbos_increase_grassland" ~ "12",
new_class == "slangbos_continuous_oldfield" ~ "21",
new_class == "slangbos_continuous_grassland" ~ "22",
new_class == "slangbos_break-crop" ~ "31",
new_class == "slangbos_break-pasture" ~ "32",
new_class == "grassland" ~ "4",
new_class == "cultivated" ~ "5",
new_class == "bare" ~ "6",
new_class == "woodland" ~ "7",
new_class == "urban" ~ "8",
new_class == "water" ~ "9",
new_class == "eucalyptus" ~ "7"))
gt
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_all_samples") %>%
st_zm()
# classify
gt = gt %>%
filter(stats_use == TRUE) %>%
mutate(class =  case_when(new_class == "slangbos_increase_oldfield" ~ "11",
new_class == "slangbos_increase_grassland" ~ "12",
new_class == "slangbos_continuous_oldfield" ~ "21",
new_class == "slangbos_continuous_grassland" ~ "22",
new_class == "slangbos_break-crop" ~ "31",
new_class == "slangbos_break-pasture" ~ "32",
new_class == "grassland" ~ "4",
new_class == "cultivated" ~ "5",
new_class == "bare" ~ "6",
new_class == "woodland" ~ "7",
new_class == "urban" ~ "8",
new_class == "water" ~ "9",
new_class == "eucalyptus" ~ "7"))
st_write(gt, "02_features/features.gpkg", layer = "LADYBRAND_gt_stats_full", append = FALSE)
# filter for Slangbos analysis, not classification (drop woody, water, urban and bare)
gt_stats = filter(gt, class != "6", class != "7", class != "8", class != "9") %>%
dplyr::select(c(class, new_class, break_date, checked_name))
print(gt_stats, n =50)
st_write(gt_stats, "02_features/features.gpkg", layer = "LADYBRAND_gt_stats_complex", append = FALSE)
# even simplified further
gt_stats_simplified = mutate(gt_stats, class_simple = case_when(class = str_detect(class, "^1") ~ 1,
class = str_detect(class, "^2") ~ 2,
class = str_detect(class, "^3") ~ 3,
class == "4" ~ 4,
class == "5" ~ 5))
st_write(gt_stats_simplified, "02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple", append = FALSE)
# print count of each class
count(gt_stats, class)
ggplot(gt_stats) +
geom_bar(aes(new_class)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1))
count(gt_stats_simplified, class_simple)
ggplot(gt_stats_simplified) +
geom_bar(aes(class_simple)) +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust=1))
library(sf)
library(tidyverse)
library(raster)
library(ggplot2)
library(plotly)
library(exactextractr)
options(max.print = 200)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple") %>%
st_zm()
gt = gt %>%
group_by(class_simple) %>%
mutate(id = row_number())
gt
# metadata
col_class = "class_simple"
col_id = "id"
dstdir = "03_develop/extract/"
indizes = c("ndvi", "evi", "dvi", "reip", "msavi", "rvi")
list.files("F:/geodata/geo402/S2/xx_S2_indices/mosaics", "*.vrt", full.names = TRUE)
list.files("F:/geodata/geo402/S2/xx_S2_indices/mosaics", indizes, full.names = TRUE)
list.files("F:/geodata/geo402/S2/xx_S2_indices/mosaics", "*.vrt", full.names = TRUE)
map(indizes.files, ~ brick(.x))
indizes.files = list.files("F:/geodata/geo402/S2/xx_S2_indices/mosaics", "*.vrt", full.names = TRUE)
map(indizes.files, ~ brick(.x))
indizes.in = map(indizes.files, ~ brick(.x)) %>% `names<-`(indizes)
indizes.in
indizes.files
indizes = c("ndvi", "evi", "dvi", "reip", "msavi", "rvi") %>% sort()
indizes
indizes = c("ndvi", "evi", "dvi", "reip", "msavi", "rvi") %>% sort()
indizes.files = list.files("F:/geodata/geo402/S2/xx_S2_indices/mosaics", "*.vrt", full.names = TRUE)
indizes.in = map(indizes.files, ~ brick(.x)) %>% `names<-`(indizes)
indizes.in
vh
vh = brick("F:/geodata/geo402/S1_GRD/xx_new/S1A_IW_GRD_VH_stack")
vh
bandnames(vh)
bandnames(indizes[1])
bandnames(indizes[[1]])
bandnames(indizes.in[[1]])
vh = brick("F:/geodata/geo402/S1_GRD/xx_new/S1A_IW_GRD_VH_stack")
indizes = c("ndvi", "evi", "dvi", "reip", "msavi", "rvi") %>% sort()
indizes.files = list.files("F:/geodata/geo402/S2/xx_S2_indices/mosaics", "*.vrt", full.names = TRUE)
# vv = brick("F:/geodata/geo402/S1_GRD/xx_new/S1A_IW_GRD_VV_stack")
co = brick("S1A_IW_SLC_VV_stack.img")
# vv = brick("F:/geodata/geo402/S1_GRD/xx_new/S1A_IW_GRD_VV_stack")
co = brick("F:/geodata/geo402/S1_SLC/xx_new/S1A_IW_SLC_VV_stack.img")
co
plot(co[[1]])
rasters = list(indizes.in, vh, co)
rasters
rasters = list(c(indizes.in), vh, co)
rasters = list(c(indizes.in), vh, co) %>% print
rasters = list(unlist(indizes.in), vh, co) %>% print
indizes.in
class(indizes.in)
unlist(indizes.in)
unlist(indizes.in, use.names = T)
rasters = list(unlist(indizes.in), vh, co) %>% print
rasters = indizes.in %>% c(vh, co)
rasters
rasters = indizes.in %>% c(vh, co) %>% `names<-`(c(indizes, vh, co)
rasters = indizes.in %>% c(vh, co) %>% `names<-`(c(indizes, vh, co))
rasters
rasters = indizes.in %>% c(vh, co) %>% `names<-`(c(indizes, "vh", "co"))
rasters
outfiles = sapply(c(indizes, "vh", "co"), function(x) paste("extract", x, sep = "_"))
outfiles
outfile = "test"
statistics = c("mean", "stdev", "count") # must be coercable by exact_extract()
# EXTRACTING -------------------------------------------------------------------
b = exactextracting(gt, co[[1:5]], col_class, col_id, statistics, dstdir, "outfile")
b
bandnames
bandnames("F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH/stack_35JMH_dvi.img")
bandnames = function(file, prefix = NULL, writeout = FALSE){
# load raster
ras = brick(file)
phrase = names(ras) # get names
# Substring
phrase.datum = substr(phrase, start = 12, stop = 19)
# convert to POSTict (R-date) format
phrase.date = as.Date(phrase.datum, format = "%Y%m%d")
bdnames = phrase.date %>%
as.character() %>%
stringr::str_replace_all("-", ".")
# prepend the prefix to date information
bdnames = map_chr(bdnames, function(x) paste0(prefix, ".", x))
if (writeout == TRUE){
outfile = paste0(file, ".txt")
write.csv(bdnames, file = outfile, row.names = FALSE)
} else return(bdnames)
}
bandnames("F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH/stack_35JMH_dvi.img")
bandnames("F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH/stack_35JMH_dvi.img", prefix = "dvi", writeout = TRUE)
library(tidyverse)
library(raster)
library(sf)
library(rgdal)
library(gdalUtils)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
dirs = c("F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH/",
"F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JNH/")
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = T, pattern = "img$"))
files
# create bandnames .txt
for (i in seq_along(files)){
map(files[[i]], function(x) {
split = str_split(x, "_")
prefix = map_chr(split, ~ .x[length(.x)])
prefix2 = map(prefix, ~ str_sub(.x, 1, -5))
bandnames(x, prefix = prefix2, writeout = TRUE)
})
}
dir_names = "F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH"
list.files(dir_names)
list.files(dir_names, "*.txt")
textfiles.dir = "F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH"
textfiles = list.files(dir_names, "*.txt")
textfiles = list.files(textfiles.dir, "*.txt")
textfiles
map2(indizes, textfiles, ~ `names<-`(.x, .y))
indizes
indizes.names = c("ndvi", "evi", "dvi", "reip", "msavi", "rvi") %>% sort()
indizes.files = list.files("F:/geodata/geo402/S2/xx_S2_indices/mosaics", "*.vrt", full.names = TRUE)
indizes = map(indizes.files, ~ brick(.x)) %>% `names<-`(indizes.names)
textfiles.dir = "F:/geodata/geo402/S2/xx_S2_indices/ladybrand35JMH"
textfiles = list.files(textfiles.dir, "*.txt")
map2(indizes, textfiles, ~ `names<-`(.x, .y))
indizes
textfiles
map2(indizes, textfiles, ~ `names<-`(.x, read_csv(.y)))
textfiles = list.files(textfiles.dir, "*.txt", full.names = TRUE)
map2(indizes, textfiles, ~ `names<-`(.x, read_csv(.y)))
read_csv(textfiles[1])
csv = read_csv(textfiles[1])
ras = indizes[[1]]
csv = read_csv(textfiles[1])
csv
names(ras) = csv
nlayers(ras)
nrow(csv)
dirs = c("F:/geodata/geo402/S2/xx_S2_indices/mosaics")
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = T, pattern = "img$"))
files
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = T))
files
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = F))
files
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = F, pattern = "!\\."))
files
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = F, pattern = "\\."))
files
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = F, pattern = !"\\."))
# get directories only of files ending with "img" (= raster information)
files = map(dirs, ~ list.files(.x, full.names = T, recursive = F, pattern = "!\\."))
files
# get directories
!list.files(.x, full.names = T, recursive = F, pattern = "\\.")
# get directories
list.files(dirs, full.names = T, recursive = F, pattern = "\\.")
# get directories
grepl(dirs[!list.files(dirs, full.names = T, recursive = F, pattern = "\\.")])
files = map(dirs, ~ list.files(.x, full.names = T, recursive = F, pattern = "\\."))
# get directories
grepl(dirs[dirs, !list.files(dirs, full.names = T, recursive = F, pattern = "\\.")])
# get directories
grepl(x = dirs, pattern = [!list.files(dirs, full.names = T, recursive = F, pattern = "\\.")])
# get directories
grepl(x = dirs, pattern = !list.files(dirs, full.names = T, recursive = F, pattern = "\\."))
dirs
# get directories
grepl(x = list.files(dirs, full.names = TRUE), pattern = "\\.")
# get directories
list.files(dirs, full.names = TRUE)[grepl(x = list.files(dirs), pattern = "\\.")]
# get directories
list.files(dirs, full.names = TRUE)[!grepl(x = list.files(dirs), pattern = "\\.")]
files = map(dirs, ~ list.files(.x, full.names = T, recursive = F, pattern = "\\."))
files
# get directories which are not files in the system
list.files(dirs, full.names = TRUE)[!grepl(x = list.files(dirs), pattern = "\\.")]
# get directories which are not files in the system
dirs = list.files(dir, full.names = TRUE)[!grepl(x = list.files(dirs), pattern = "\\.")]
dir = c("F:/geodata/geo402/S2/xx_S2_indices/mosaics")
# get directories which are not files in the system
dirs = list.files(dir, full.names = TRUE)[!grepl(x = list.files(dirs), pattern = "\\.")]
dirs
# create bandnames .txt
for (i in seq_along(files)){
map(files[[i]], function(x) {
split = str_split(x, "_")
prefix = map_chr(split, ~ .x[length(.x)])
prefix2 = map(prefix, ~ str_sub(.x, 1, -5))
bandnames(x, prefix = prefix2, writeout = TRUE)
})
}
files
library(sf)
library(tidyverse)
library(raster)
library(ggplot2)
library(plotly)
library(exactextractr)
options(max.print = 200)
source("D:/Geodaten/Master/projects/402slangbos/functions.R")
source("D:/Geodaten/Master/projects/402slangbos/import.R")
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
# destination
dstdir = "03_develop/extract/"
# load reference sites
gt = st_read("02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple") %>%
st_zm()
# example stats
b_extracted = exactextracting(gt, ras = co[[1:10]], col_class = "class_simple", col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
# example stats
b_extracted = exactextracting(gt, ras = co[[1:10]], col_class = "class_simple", col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
co
gt
source("D:/Geodaten/Master/projects/402slangbos/import.R")
# example stats
b_extracted = exactextracting(gt, ras = co[[1:10]], col_class = "class_simple", col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
View(exactextracting)
gt
gt = st_read("D:/Geodaten/#Jupiter/GEO402/02_features/features.gpkg", layer = "LADYBRAND_gt_stats_simple") %>%
st_zm() %>%
group_by(class_simple) %>%
mutate(id = row_number())
gt
source("D:/Geodaten/Master/projects/402slangbos/import.R")
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
# destination
dstdir = "03_develop/extract/"
# example stats
b_extracted = exactextracting(gt, ras = co[[1:10]], col_class = "class_simple", col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
gt
source("D:/Geodaten/Master/projects/402slangbos/import.R")
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
# destination
dstdir = "03_develop/extract/"
# example stats
b_extracted = exactextracting(gt, ras = co[[1:10]], col_class = "class_simple", col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
b_extracted
# load dummy
readRDS("03_develop/extract/test.RDS")
# all raster to be queried
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
layernames = c("vh", "vv", "co", "dvi", "evi", "msavi", "ndvi", "reip", "rvi")
names(rasters) = layernames
statistics = c("median", "sd", "mean")
ras = coh[[1:5]]
# check if exactextracting is operative
example_stats = exactextracting(gt, ras, col_class = "class_simple",
col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
ras = coh[[1:5]]
# check if exactextracting is operative
example_stats = exactextracting(gt, ras, col_class = "class_simple",
col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
ras = co[[1:5]]
# check if exactextracting is operative
example_stats = exactextracting(gt, ras, col_class = "class_simple",
col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
# load dummy
readRDS("03_develop/extract/test.RDS")
# all raster to be queried
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
layernames = c("vh", "vv", "co", "dvi", "evi", "msavi", "ndvi", "reip", "rvi")
names(rasters) = layernames
# example run
e = extract_summary(gt, ras, col_class, statistics)
extract_summary
# example run
e = extract_summary(gt, ras, col_class, statistics)
col_class
col_class = "class_simple"
# example run
e = extract_summary(gt, ras, col_class, statistics)
e
# batch run
summary = list()
for (i in seq_along(rasters)){
summary[[i]] = extract_summary(gt, rasters[[i]], col_class, statistics)
}
saveRDS(summary, paste0(dstdir, "summary_statistics.RDS"))
summary
