matrix
plotLearnerPrediction(classif.lrn.optimised, task = classif.task)
names(raster_input)
pred
names(pred)
result_xy = cbind(pred, raster_input$x, raster_input$y) %>%
as.data.frame() %>%
dplyr::select(x = "raster_input$x", y = "raster_input$y", class = response)
View(result_xy)
# sf for coordnate system
out_sf = st_as_sf(result_xy, coords = c("x", "y"))
st_crs(out_sf) = 32735
out_sf$class = as.numeric(out_sf$class)
out_sf[out_sf$class == 2,1] = 12
out_sf[out_sf$class == 3,1] = 2
str(out_sf)
out_sf$class
as.factor(out_sf$class)
out_sf$class = as.factor(out_sf$class)
# to sp for gridding, functionality is not yet found in sf... st_rasterize may work in `stars`
out_sp = as(out_sf, "Spatial")
gridded(out_sp) = TRUE
class(out_sp)
?writeRaster
outfile = raster(out_sp) %>%
trim()
writeRaster(outfile, filename = paste0(prediction_out_path, "0121_prediction_rf_crop"),
format="GTiff", datatype='INT1U', overwrite=TRUE, na.rm=TRUE)
prediction_out_path = "D:\\Geodaten\\#Jupiter\\GEO402\\04_products\\rf\\"
writeRaster(outfile, filename = paste0(prediction_out_path, "0121_prediction_rf_crop"),
format="GTiff", datatype='INT1U', overwrite=TRUE, na.rm=TRUE)
prediction
model$subset # no subset
model$learner.model
model$task.desc
c("1", "12", "2", "3", "4")
as.factors(c("1", "12", "2", "3", "4"))
as.factor(c("1", "12", "2", "3", "4"))
classif.lrn.optimised$par.set # Learner
classif.lrn.optimised # Task
classif.lrn.optimised$par.set # Learner
classif.task
# Input of stack, which is containing training and reference data
if (!file.exists(paste0(rds_path, "learning_input_VH.rds"))) {
print("file does not exist")
gt_from_raster(raster = s1vh, outfile = "VH")
data_input = readRDS(paste0(rds_path, "learning_input_VH.rds"))
} else {data_input = readRDS(paste0(rds_path, "learning_input_VH.rds"))}
data_input
data_input$X2015.03.11
data_input$class
str(data_input$class)
data_input$class
map(data_input$class, mean)
map(data_input$class)
data_input$class %>%
group_by(class) %>%
summarise(n = n())
View(data_input$class)
View(gt_from_raster)
# performance
slangbos_spcv
slangbos_spcv$aggr
slangbos_spcv$measures.test
matrix
matrix = calculateConfusionMatrix(prediction)
n = getTaskSize(classif.task)
n
training.set = sample(n, size = n/3)
prediction
source("02_cross_val.R")
classif.task = makeClassifTask(
id = "slangbos", data = s1vh, target = "class",
coordinates = coords
)
small_list = list.reflectance[1:2]
source("import.R")
library(raster)
library(stars)
library(tidyverse)
path = "F:/geodata/geo402/s2/"
list.reflectance = list.files(path = "F:/geodata/geo402/s2/", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm = list.files(path = "F:/geodata/geo402/s2/", pattern = "CM.tif$", recursive = T)
new = "D:/Geodaten/#Jupiter/01_data/s2"
small_list = list.reflectance[1:2]
small_list
new = "D:/Geodaten/#Jupiter/01_data/s2/"
small_list = list.reflectance[1:2]
lapply(small_list, file.copy(from = . , to = new))
lapply(small_list, file.copy(from = small_list, to = new))
file.copy(from = small_list, to = new))
file.copy(from = small_list, to = new)
class(new)
file.copy(from = small_list, to = "D:/Geodaten/#Jupiter/01_data/s2/")
file.copy(from = small_list[1], to = "D:/Geodaten/#Jupiter/01_data/s2/")
new = "D:/Geodaten/#Jupiter/GEO402/01_data/s2"
dir.create(new)
small_list = list.reflectance[1:2]
small_list[1]
file.copy(from = small_list[1], to = "D:/Geodaten/#Jupiter/01_data/s2/")
file.copy(from = small_list[1], to = "D:/Geodaten/#Jupiter/01_data/s2")
file.copy(from = small_list[1], to = "D:/Geodaten/#Jupiter/01_data/s2/new.tif")
?file.copy
file.copy(from = small_list[1], to = "D:/Geodaten/#Jupiter/01_data/s2/new.tif", recursive = TRUE)
file.copy(from = small_list[1], to = "D:/Geodaten/#Jupiter/01_data/s2/", recursive = TRUE)
file.copy(from = small_list[1], to = "D:\\Geodaten\\#Jupiter\\01_data\\s2\\", recursive = TRUE)
file.copy(from = small_list[1], to = "D:\\Geodaten\\#Jupiter\\01_data\\s2", recursive = TRUE)
dir.create(new)
small_list = list.reflectance[1:2]
file.copy(from = small_list[1], to = "D:\\Geodaten\\#Jupiter\\01_data\\s2", recursive = TRUE)
# stack dirs
dir(new)
new = "D:/Geodaten/#Jupiter/GEO402/01_data/s2"
# stack dirs
dir(new)
dir.create(new)
# stack dirs
dir("D:/Geodaten/#Jupiter/GEO402/01_data/s2")
# stack dirs
dir("D:/Geodaten/#Jupiter/GEO402/01_data/s2")
file.copy(from = small_list[1], to = "D:\\Geodaten\\#Jupiter\\01_data\\s2", recursive = TRUE)
# stack dirs
dir("D:/Geodaten/#Jupiter/GEO402/01_data/s2")
file.copy(from = small_list[1], to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", recursive = TRUE)
# check if there is data here:
dir("D:/Geodaten/#Jupiter/GEO402/01_data/s2")
new = "D:/Geodaten/#Jupiter/GEO402/01_data/s2"
dir.create(new)
dir.exists(new)
file.copy(from = small_list, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", recursive = TRUE)
file.copy(from = list.reflectance, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", recursive = TRUE)
path_s2 = "D:/Geodaten/#Jupiter/GEO402/01_data/s2"
path_cm = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm"
dir.create(path_cm)
dir.exists(path_cm)
# file.copy(from = list.reflectance, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", recursive = TRUE)
file.copy(from = list.cm, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm", recursive = TRUE)
list.cm = list.files(path = "F:/geodata/geo402/s2/", pattern = "CM.tif$", recursive = T)
# file.copy(from = list.reflectance, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", recursive = TRUE)
file.copy(from = list.cm, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm", recursive = TRUE)
list.cm
list.cm = list.files(path = "F:/geodata/geo402/s2/", pattern = "CM.tif$", recursive = T, full.names = TRUE)
# file.copy(from = list.reflectance, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", recursive = TRUE)
file.copy(from = list.cm, to = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm", recursive = TRUE)
list.reflectance = list.files(path = "F:/geodata/geo402/s2/", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm = list.files(path = "F:/geodata/geo402/s2/", pattern = "CM.tif$", recursive = T)
# cloud mask preprocess
cm = read_stars(list.cm[1], proxy=T)
list.reflectance_on_storage = list.files(path = "F:/geodata/geo402/s2/", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm_on_storage = list.files(path = "F:/geodata/geo402/s2/", pattern = "CM.tif$", recursive = T, full.names = TRUE)
list.cm = list.files(path = "F:/geodata/geo402/s2/", pattern = "CM.tif$", recursive = T, full.names = TRUE)
# cloud mask preprocess
cm = read_stars(list.cm[1], proxy=T)
cm
plot(cm)
plot(cm[[3]])
plot(cm)
cm[1]
cm
cm[1]
cm
cm.remove = function(x, cm){
x * cm
}
?adrop
adrop(cm)
s = brick(list.reflectance[2])
p = read_stars(list.reflectance[2])
p = read_stars(list.reflectance[2], proxy = TRUE)
p
s
names(p)
names(s)
s
p
st_apply
?st_apply
s2.ndvi = st_apply(p, c("x", "y"), func.ndvi)  #stars
s2.ndvi = calc(s, func.ndvi)
func.ndvi = function(x) (x[8] - x[4])/(x[8] + x[4])
s2.ndvi = st_apply(p, c("x", "y"), func.ndvi)  #stars
s2.ndvi = calc(s, func.ndvi)
s2.ndvi
plot(s2.ndvi)
?stars::write_stars()
?st_apply
if (require(pbapply)) { # install it, if FALSE
pboptions(type = "timer")
}
s2.ndvi = st_apply(p, c("x", "y"), func.ndvi, fil)  #stars
s2.ndvi = calc(s, func.ndvi)
s2.ndvi = st_apply(p, c("x", "y"), func.ndvi, fil)  #stars
development_path = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\
# where to write rds_files:
rds_path = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\rda\\"
development_path = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\
# where to write rds_files:
rds_path = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\rda\\"
development_path = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\"
path_developement = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\"
path_developement + "hallo"
paste0(path_developement, "hallo")
system.time(write_stars(s2.ndvi, paste0(path_developement, "s2")))
write_stars(s2.ndvi, dsn = paste0(path_developement, "s2"))
s2.ndvi = st_apply(p, c("x", "y"), func.ndvi)  #stars
s2.ndvi
plot(s2.ndvi)
write_stars(s2.ndvi, dsn = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\s2\\ndvi2.tif"))
write_stars(s2.ndvi, dsn = "D:\\Geodaten\\#Jupiter\\GEO402\\03_develop\\s2\\ndvi2.tif")
s2.ndvi = calc(s, func.ndvi, filename = paste0(development_path, "\\d2\\ndvi3.tif"))
s2.ndvi = system.time(calc(s, func.ndvi, filename = paste0(development_path, "/s2/ndvi3.tif")))
# merging to binary
cm = read_stars(list.cm[1], proxy=T)
# merging to binary
cm = read_stars(list.cm[1], proxy=T)
plot(cm)
# merging to binary
cm = read_stars(list.cm[2], proxy=T)
plot(cm)
cm[[i = 3]]
cm
cm[2]
plot(cm[2])
cm[2]
cm[1]
plot(cm[1])
cm[1] == 2 or cm[1] == 3 = 0
cm[1] %is% 2 = 0
cm[[1]]
cm[[2]]
cm$S2A_MSIL1C_20160108T075312_N0201_R135_T35JNH_20160108T081418_CM.tif
cm[1]
if (cm[1] == 3) (cm = 0)
if (cm[1] == 3){"hallo"}
cm[[1]]
# merging to binary
cm = read_stars(list.cm[2], proxy=T)
plot(cm)
cm[[1]]
cm[1]
cm[2]
cm[3]
cm[1]
cm = brick(list.cm[2])
cm
cm[[4]]
cm2 = cm ==3
plot(cm2)
cm2 = cm == 3 || cm == 2
cm2 = cm == 3 | cm == 2
cm2
plot(cm2)
cm[cm == 2 | cm == 3] = 0
cm = brick(list.cm[2])
new = cm[cm == 2 | cm == 3] = 0
new
mask = function(x){
if(x[x == 2 | x == 3]){x = 1}
else{x = 0}
return(x)
}
cm2 = calc(cm, fun = mask)
x[x == 2 | x == 3]
mask = function(x){
out = x == 3 | x == 2
return(out)
}
cm2 = calc(cm, fun = mask)
plot(cm2)
cm2 = cm == 3 | cm == 2
cm = brick(list.cm[2])
mask = function(x){
out = x == 3 | x == 2
return(out)
}
cm2 = calc(cm, fun = mask)
plot(cm2)
# mask function (for raster*)
mask = function(x){out = x == 3 | x == 2; return(out)}
print(cm)
cm
print(cm)
names(cm)
cm
str(c)
str(cm)
View(cm)
cm@legend@colortable
cm@extent
cm@data@attributes[[1]]
cm$data
cm@data@names
cm@data@isfactor
cm@data@attributes
class(cm@data@attributes)
class(cm@data@attributes$1)
class(cm@data@attributes[[1]])
cm@data@attributes[[1]]
for (x in list.cm){
print(x)
}
# get on cm
cm = raster(list.cm[2])
# count the NA values in each layer
cm.na <- cellStats(is.na(cm), sum)
cm.na
# get on cm
cm = raster(list.cm[1])
# count the NA values in each layer
cm.na <- cellStats(is.na(cm), sum)
cm.na
# fraction that is NA
cm.na = cm.na/ncell(cm)
# count the NA values in each layer
cm.na = cellStats(is.na(cm), sum)
# fraction that is NA
cm.na.fraction = cm.na/ncell(cm)
cm.na.fraction
# get one cm
cm = brick(list.cm[1:30])
# get one cm
cm = brick(list.cm[1])
# get one cm
cm = brick(list.cm[1:2])
warnings()
list.cm[1:2]
# get one cm
cm = stack(list.cm[1:10])
cm
cm.na = cellStats(is.na(cm), sum) # count the NA values in each layer
cm.na.fraction = cm.na/ncell(cm) # fraction that is NA
cm.na.fraction
# Applying cloud mask to 1 scene (then scopable) -------------------------------
#############################
list.reflectance = list.files(path = "D:/Geodaten/#Jupiter/01data/01_data/s2", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm = list.files(path = "D:/Geodaten/#Jupiter/01data/01_data/s2/cm", pattern = "CM.tif$", recursive = T, full.names = TRUE)
# get one cm
cm = stack(list.cm[1:10])
list.cm
# Applying cloud mask to 1 scene (then scopable) -------------------------------
#############################
list.reflectance = list.files(path = "D:/Geodaten/#Jupiter/01_data/s2", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm = list.files(path = "D:/Geodaten/#Jupiter/01_data/s2/cm", pattern = "CM.tif$", recursive = T, full.names = TRUE)
list.cm
# Applying cloud mask to 1 scene (then scopable) -------------------------------
#############################
list.reflectance = list.files(path = "D:/Geodaten/#Jupiter/01_data/s2", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm = list.files(path = "D:/Geodaten/#Jupiter/01_data/s2/cm", pattern = "CM.tif$", recursive = T, full.names = TRUE)
list.cm
list.reflectance
# Applying cloud mask to 1 scene (then scopable) -------------------------------
#############################
list.reflectance = list.files(path = "D:\Geodaten\#Jupiter\GEO402\01_data\s2", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm = list.files(path = "D:\Geodaten\#Jupiter\GEO402\01_data\s2\cm", pattern = "CM.tif$", recursive = T, full.names = TRUE)
\
# Applying cloud mask to 1 scene (then scopable) -------------------------------
#############################
list.reflectance = list.files(path = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.reflectance
list.cm = list.files(path = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm", pattern = "CM.tif$", recursive = T, full.names = TRUE)
list.cm
cm.na.fraction
8.797e-01
6.967e-07
filtered.out = cm[[which(cm.na.fraction)>0.2]] # filter all with na more than 20%
filtered.out = cm[[which(cm.na.fraction>0.2)]] # filter all with na more than 20%
filtered.out
plot(filtered.out)
plot(read_stars(filtered.out))
plot(st_as_stars(filtered.out))
cm.na.fraction
6.967e-07
filtered.out = cm[[which(cm.na.fraction<0.1)]] # filter all with na more than 20%
filtered.out
plot(st_as_stars(filtered.out))
names(filtered.out)
?file.remove
path_cm = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm"
paste0(path_cm, names(filtered.out))
filtered.out = cm[[which(cm.na.fraction>0.1)]] # filter all with na more than 20%
names(filtered.out)
paste0(path_cm, names(filtered.out))
filtered.out = cm[[which(cm.na.fraction>0.2)]] # filter all with na more than 20%
names(filtered.out)
file.remove(paste0(path_cm, names(filtered.out)))
path_cm = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm"
dir.exists(path_cm)
path_cm, names(filtered.out))
paste0(path_cm, names(filtered.out))
path_cm = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm/"
file.remove(paste0(path_cm, names(filtered.out)))
file.remove(paste0(path_cm, names(filtered.out), ".tif"))
# get one cm
cm = stack(list.cm)
# get one cm
cm = stack(list.cm)
source("import.R")
library(raster)
library(stars)
library(tidyverse)
if (require(pbapply)) { # install it, if FALSE
pboptions(type = "timer")
}
list.reflectance_on_storage = list.files(path = "F:/geodata/geo402/s2/", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm_on_storage = list.files(path = "F:/geodata/geo402/s2/", pattern = "CM.tif$", recursive = T, full.names = TRUE)
list.reflectance = list.files(path = "D:/Geodaten/#Jupiter/GEO402/01_data/s2", pattern = "atm_20m.tif", recursive = T, full.names = TRUE)
list.cm = list.files(path = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm", pattern = "CM.tif$", recursive = T, full.names = TRUE)
# stack dirs
path_s2 = "D:/Geodaten/#Jupiter/GEO402/01_data/s2"
path_cm = "D:/Geodaten/#Jupiter/GEO402/01_data/s2/cm/"
# check if there is data here:
dir("D:/Geodaten/#Jupiter/GEO402/01_data/s2")
# get all cm
cm = brick(list.cm)
# description of cm
cm@data@attributes[[1]]
# get all cm
cm = stack(list.cm)
# description of cm
cm@data@attributes[[1]]
cm
cm@filename
View(cm)
list.cm
plot(cm[0])
cm.na = cellStats(is.na(cm), sum) # count the NA values in each layer
cm.na.fraction = cm.na/ncell(cm) # fraction that is NA
cm.na.fraction
cm.filtered.out = cm[[which(cm.na.fraction>0.2)]] # filter all with na more than 20%
names(cm.filtered.out) # return dir with NA rasters
reflectances = stack(list.reflectance)
reflectances.na = cellStats(is.na(reflectances), sum)
reflectances.na.fraction = reflectances.na/ncell(reflectances)
reflectances.na.fraction
refl.filtered.out = reflectances[[which(reflectances.na.fraction>0.2)]] # filter all with na more than 20%
names(refl.filtered.out)
?rds
names(refl.filtered.out)
reflectances.na.fraction
cm.na.fraction
names(cm.filtered.out) # return dir with NA rasters
reflectances = stack(list.reflectance)
reflectances.na = cellStats(is.na(reflectances), sum)
reflectances.na.fraction = reflectances.na/ncell(reflectances)
reflectances.na.fraction
refl.filtered.out = reflectances[[which(reflectances.na.fraction>0.2)]] # filter all with na more than 20%
names(refl.filtered.out)
View(reflectances)
View(cm.filtered.out)
names(cm.filtered.out) # return dir with NA rasters
saveRDS(cm.filtered.out, paste0(path_developement, "rda\\cm_filtered.rds"))
library("foreign")
read.dbf("D:\Geodaten\#Jupiter\GEO402\03_develop\k-means\1b_stats.dbf")
# ------------------------------------------------------------------------------
# Import dbf
library(foreign)
# ------------------------------------------------------------------------------
# Import dbf
library(foreign)
dbf = read.dbf("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_stats.dbf")
dbf = read.csv("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_stats.dbf")
sbf
dbf
dbf = read.csv("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_stats.dbf", sep = "tab")
?read.csv
dbf = read.csv("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_stats.dbf", sep = "")
dbf
dbf$Elements
dbf
ras = raster("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sgrd")
?raster
ras = raster("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sdat")
ras
plot(ras)
library(stars)
plot(st_as_stars(ras))
ras = stars("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sdat")
ras = stars("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sdat", proxy = T)
ras = read_stars("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sdat", proxy = T)
plot(ras)
plot(ras, col = viridis::viridis(1:10))
library(viridis)
plot(ras, col = viridis::viridis(1:10))
plot(ras, col = viridis::viridis(1, 1:10))
plot(ras, col = viridis::viridis(1, 1))
plot(ras, col = viridis::viridis(10, 1))
plot(ras, col = viridis::viridis(10, 10))
plot(ras, col = viridis::viridis(10, 0.4))
plot(ras, col = viridis::viridis(10))
dbf
plot(ras["ClusterID" == 1])
ras+1
plot(ras)
ras = raster("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sdat")
plot(ras[1])
ras["ClusterID"]
tidyverse
library(tidyverse)
ras %>%
filter("ClusterID" == 1) %>%
plot()
ras = read_stars("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sdat", proxy = T)
plot(ras, col = viridis::viridis(10))
ras %>%
filter("ClusterID" == 1) %>%
plot()
ras %>%
filter(1,1) %>%
plot()
ras = raster("D:/Geodaten/#Jupiter/GEO402/03_develop/k-means/1b_cluster.sdat")
ras[ras == 1]
plot(ras[ras == 1])
