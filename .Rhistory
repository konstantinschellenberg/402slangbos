inner = append(inner, entity)
}
# iterate by class
for (i in sort(unique(join$class))){
inner = list()
ij = filter(join, join$class == i)
# iterate by number
for (j in sort(unique(ij$id))){
# wrangle dataframe
entity = filter(join, join$class == i & join$id == j) %>%
dplyr::select(-c(class, id)) %>%
t() %>%
as.data.frame() %>%
mutate(rowname = row.names(.))
date_raw = entity$rowname
# get date
date = substr(date_raw, start = nchar(date_raw) - 9, stop = nchar(date_raw))
date = as.POSIXct(date, tryFormats = "%Y.%m.%d") %>%
unique() %>%
as.data.frame() %>%
`colnames<-`("date")
# init single dataframe
stat = list()
for (h in seq_along(statistics)){
metric = statistics[h]
data = entity %>% filter(str_detect(rowname, metric)) %>%
dplyr::select(-rowname) %>%
`colnames<-`(metric)
stat[[h]] = data
}
# bind lists to dataframe
stat = cbind(stat, date)
if (nrow(stat) == length(stat$med[stat$med == TRUE])) next
print(j)
# smoothing functions
smooth_names = c("med_smooth", "losd_smooth", "upsd_smooth")
# functions
med_smooth = supsmu(stat$date, stat$med)
losd_smooth = supsmu(stat$date, stat$mean - stat$stdev)
sd_smooth = supsmu(stat$date, stat$mean + stat$stdev)
# listed
smooth = list(med_smooth, losd_smooth, sd_smooth)
single_columns = map2(smooth, smooth_names, function(x, y){
df = data.frame(x$x, x$y) %>% `names<-`(c("date", y))
})
stat_smoothed = left_join(stat, single_columns, by = "date", copy = TRUE, keep = FALSE) %>%
select(-c(date.1, date.2))
# create list and rename ij table
entity = list(as.data.frame(stat_smoothed)) %>% `names<-`(j)
inner = append(inner, entity)
}
# iteratively add the lists of dataframes of the classes to a master (outer) class
outer[[i]] = inner
}
exactextracting = function(gt, ras, col_class, col_id, statistics, dstdir, outfile){
#' 1st order list: classes
#' 2nd order list: raster bands
#' 3rd order dataframe: aggregated statistics with smoothing curves
if (!is_vector(gt[[col_id]])){
stop("the col_id does not exist, please specify...")
}
if ((!is_vector(gt[[col_class]]))){
stop("the col_class does not exist, please specify...")
}
statistics = c("med", statistics)
layernames = names(ras)
medianname = paste("med", layernames, sep = ".")
library(exactextractr)
# create dirs
if (!dir.exists(dstdir)) {dir.create(dstdir)}
# extracting user-defined function (median) to the exactextract
raslist = list()
for (i in 1:nlayers(ras)){
r = ras[[i]]
raslist = append(raslist, r)
}
print("processing median")
med = lapply(raslist, function(x) exact_extract(x, gt, function(values, coverage_fraction){
median(values[!is.na(values)], na.rm = TRUE)
})) %>%
as.data.frame(col.names = medianname)
# extracting
print("processing other metrics")
ex = exactextractr::exact_extract(ras, gt, statistics[2:length(statistics)]) # calculate means
all_data = cbind(med, ex)
# join classes on extracted data for tidying pipe coming
join = mutate(all_data, class = gt[[col_class]], id = gt[[col_id]])
join[is.na(join)] = NA
outer = vector("list", length = length(unique(join$class)))
# iterate by class
for (i in sort(unique(join$class))){
inner = list()
ij = filter(join, join$class == i)
# iterate by number
for (j in sort(unique(ij$id))){
# wrangle dataframe
entity = filter(join, join$class == i & join$id == j) %>%
dplyr::select(-c(class, id)) %>%
t() %>%
as.data.frame() %>%
mutate(rowname = row.names(.))
date_raw = entity$rowname
# get date
date = substr(date_raw, start = nchar(date_raw) - 9, stop = nchar(date_raw))
date = as.POSIXct(date, tryFormats = "%Y.%m.%d") %>%
unique() %>%
as.data.frame() %>%
`colnames<-`("date")
# init single dataframe
stat = list()
for (h in seq_along(statistics)){
metric = statistics[h]
data = entity %>% filter(str_detect(rowname, metric)) %>%
dplyr::select(-rowname) %>%
`colnames<-`(metric)
stat[[h]] = data
}
# bind lists to dataframe
stat = cbind(stat, date)
if (nrow(stat) == length(stat$med[stat$med == TRUE])) next
# print(j)
# smoothing functions
smooth_names = c("med_smooth", "losd_smooth", "upsd_smooth")
# functions
med_smooth = supsmu(stat$date, stat$med)
losd_smooth = supsmu(stat$date, stat$mean - stat$stdev)
sd_smooth = supsmu(stat$date, stat$mean + stat$stdev)
# listed
smooth = list(med_smooth, losd_smooth, sd_smooth)
single_columns = map2(smooth, smooth_names, function(x, y){
df = data.frame(x$x, x$y) %>% `names<-`(c("date", y))
})
stat_smoothed = left_join(stat, single_columns, by = "date", copy = TRUE, keep = FALSE) %>%
select(-c(date.1, date.2))
# create list and rename ij table
entity = list(as.data.frame(stat_smoothed)) %>% `names<-`(j)
inner = append(inner, entity)
}
# iteratively add the lists of dataframes of the classes to a master (outer) class
outer[[i]] = inner
}
saveRDS(outer, paste0(dstdir, outfile))
return(outer)
}
# EXTRACTING -------------------------------------------------------------------
b = exactextracting(gt, co[[1:10]], col_class, col_id, statistics, dstdir, "outfile")
# EXTRACTING -------------------------------------------------------------------
b = exactextracting(gt, co[[1:10]], col_class, col_id, statistics, dstdir, "outfile")
statistics
# median is calculated anyways; must be coercable by exact_extract()
statistics = c("mean", "stdev", "count")
# EXTRACTING -------------------------------------------------------------------
b = exactextracting(gt, co[[1:10]], col_class, col_id, statistics, dstdir, "outfile")
b
b[[2]]
library(sf)
library(tidyverse)
library(raster)
library(ggplot2)
library(plotly)
library(exactextractr)
options(max.print = 200)
source("D:/Geodaten/Master/projects/402slangbos/import.R")
# SET ENVIRONMENT --------------------------------------------------------------
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
# destination
dstdir = "03_develop/extract/"
# TEST RUN ---------------------------------------------------------------------
# example raster
ras = co[[1:5]]
col_class = "class_simple"
# check if exactextracting is operative
example_stats = exactextracting(gt, ras, col_class,
col_id = "id", statistics = c("mean", "stdev", "count"),
dstdir, outfile = "test.RDS")
# load dummy
readRDS("03_develop/extract/test.RDS")
# all raster to be queried
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
layernames = c("vh", "vv", "co", "dvi", "evi", "msavi", "ndvi", "reip", "rvi")
names(rasters) = layernames
statistics = c("median", "sd", "mean")
# example run
e = extract_summary(gt, ras, col_class, statistics)
e
# batch run
summary = list()
for (i in seq_along(rasters)){
summary[[i]] = extract_summary(gt, rasters[[i]], col_class, statistics)
}
saveRDS(summary, paste0(dstdir, "summary_statistics.RDS"))
extract_summary
rasters
map2(outfiles, rasters, function(x, y){
cat(x)
exactextracting(gt = gt, ras = y,
col_class = "class_simple",
col_id = "id",
statistics = statistics,
dstdir = dstdir,
outfile = x)
})
# gt = ground-truth samples
# LOAD PACKAGES ----------------------------------------------------------------
library(sf)
library(tidyverse)
library(raster)
library(ggplot2)
library(plotly)
library(exactextractr)
options(max.print = 200)
source("D:/Geodaten/Master/projects/402slangbos/import.R")
# SET ENVIRONMENT --------------------------------------------------------------
env = "D:/Geodaten/#Jupiter/GEO402"
setwd(env)
# IMPORT RASTERS ---------------------------------------------------------------
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
layernames = c("vh", "vv", "co", "dvi", "evi", "msavi", "ndvi", "reip", "rvi")
names(rasters) = layernames
# SOME METADATA FOR TESTING ----------------------------------------------------
# metadata
col_class = "class_simple"
col_id = "id"
dstdir = "03_develop/extract/"
# layernames of raster need to have a date suffix in the form yyyy.mm.dd
outfiles = sapply(layernames, function(x) paste("extract", x, sep = "_"))
outfile = "test"
# median is calculated anyways; must be coercable by exact_extract()
statistics = c("mean", "stdev", "count")
# EXTRACTING -------------------------------------------------------------------
b = exactextracting(gt, co[[1:10]], col_class, col_id, statistics, dstdir, "outfile")
map2(outfiles, rasters, function(x, y){
cat(x)
exactextracting(gt = gt, ras = y,
col_class = "class_simple",
col_id = "id",
statistics = statistics,
dstdir = dstdir,
outfile = x)
})
example = readRDS("03_develop/extract/extract_ndvi")
o = example[[1]][[1]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[2]][[35]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
example = readRDS("03_develop/extract/extract_vh")
o = example[[2]][[35]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
example = readRDS("03_develop/extract/extract_co")
o = example[[2]][[35]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[1]][[35]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[1]][[1]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[1]][[2]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[1]][[3]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[1]][[4]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[1]][[5]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
o = example[[1]][[5]]
o[is.na(o)] = NA
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
example = readRDS("03_develop/extract/extract_reip")
o = example[[1]][[5]]
o[is.na(o)] = NA
o = o %>% na.omit()
ggplot(o) +
geom_ribbon(aes(date, ymin = mean - 2*stdev, ymax = mean + 2* stdev), fill = "lightgrey", alpha = 0.9) +
geom_line(aes(date, med)) +
geom_line(aes(date, med_smooth), color = "blue") +
geom_line(aes(date, losd_smooth), na.rm = T) +
# geom_line(aes(date, mean + 2 * stdev), na.rm = T) +
theme_bw()
exactextracting = function(gt, ras, col_class, col_id, statistics, dstdir, outfile){
#' 1st order list: classes
#' 2nd order list: raster bands
#' 3rd order dataframe: aggregated statistics with smoothing curves
if (!is_vector(gt[[col_id]])){
stop("the col_id does not exist, please specify...")
}
if ((!is_vector(gt[[col_class]]))){
stop("the col_class does not exist, please specify...")
}
statistics = c("med", statistics)
layernames = names(ras)
medianname = paste("med", layernames, sep = ".")
library(exactextractr)
# create dirs
if (!dir.exists(dstdir)) {dir.create(dstdir)}
# extracting user-defined function (median) to the exactextract
raslist = list()
for (i in 1:nlayers(ras)){
r = ras[[i]]
raslist = append(raslist, r)
}
print("processing median")
med = lapply(raslist, function(x) exact_extract(x, gt, function(values, coverage_fraction){
median(values[!is.na(values)], na.rm = TRUE)
})) %>%
as.data.frame(col.names = medianname)
# extracting
print("processing other metrics")
ex = exactextractr::exact_extract(ras, gt, statistics[2:length(statistics)]) # calculate means
all_data = cbind(med, ex)
# join classes on extracted data for tidying pipe coming
join = mutate(all_data, class = gt[[col_class]], id = gt[[col_id]])
join[is.na(join)] = NA
outer = vector("list", length = length(unique(join$class)))
# iterate by class
for (i in sort(unique(join$class))){
inner = list()
print(i)
ij = filter(join, join$class == i)
# iterate by number
for (j in sort(unique(ij$id))){
print(j)
# wrangle dataframe
entity = filter(join, join$class == i & join$id == j) %>%
dplyr::select(-c(class, id)) %>%
t() %>%
as.data.frame() %>%
mutate(rowname = row.names(.))
date_raw = entity$rowname
# get date
date = substr(date_raw, start = nchar(date_raw) - 9, stop = nchar(date_raw))
date = as.POSIXct(date, tryFormats = "%Y.%m.%d") %>%
unique() %>%
as.data.frame() %>%
`colnames<-`("date")
# init single dataframe
stat = list()
for (h in seq_along(statistics)){
metric = statistics[h]
data = entity %>% filter(str_detect(rowname, metric)) %>%
dplyr::select(-rowname) %>%
`colnames<-`(metric)
stat[[h]] = data
}
# bind lists to dataframe
stat = cbind(stat, date)
if (nrow(stat) == length(stat$med[stat$med == TRUE])) next
# print(j)
# smoothing functions
smooth_names = c("med_smooth", "losd_smooth", "upsd_smooth")
# functions
med_smooth = supsmu(stat$date, stat$med)
losd_smooth = supsmu(stat$date, stat$mean - stat$stdev)
sd_smooth = supsmu(stat$date, stat$mean + stat$stdev)
# listed
smooth = list(med_smooth, losd_smooth, sd_smooth)
single_columns = map2(smooth, smooth_names, function(x, y){
df = data.frame(x$x, x$y) %>% `names<-`(c("date", y))
})
stat_smoothed = left_join(stat, single_columns, by = "date", copy = TRUE, keep = FALSE) %>%
select(-c(date.1, date.2))
# create list and rename ij table
entity = list(as.data.frame(stat_smoothed)) %>% `names<-`(j)
inner = append(inner, entity)
}
# iteratively add the lists of dataframes of the classes to a master (outer) class
outer[[i]] = inner
}
saveRDS(outer, paste0(dstdir, outfile))
return(outer)
}
rasters = raster[[8:9]]
rasters
rasters = raster[8:9]
rasters = rasters[[8:9]]
rasters = rasters[[8]]
rasters
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
rasters
rasters = list(rasters[["reip"]], rasters[["rvi"]])
rasters
rasters = list(rasters[["reip"]], rasters[["rvi"]])
rasters
rasters = list(rasters[[8]], rasters[[9]])
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
rasters = list(rasters[[8]], rasters[[9]])
rasters
rasters = list(rasters[[8]], rasters[[9]]) %>% `names<-`(c(layernames[8], layernames[9]))
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
rasters = list(rasters[[8]], rasters[[9]]) %>% `names<-`(c(layernames[8], layernames[9]))
map2(outfiles, rasters, function(x, y){
cat(x)
exactextracting(gt = gt, ras = y,
col_class = "class_simple",
col_id = "id",
statistics = statistics,
dstdir = dstdir,
outfile = x)
})
outfiles
layernames = layernames[8:9]
rasters = list(vh, vv, co, dvi, evi, msavi, ndvi, reip, rvi)
layernames = c("vh", "vv", "co", "dvi", "evi", "msavi", "ndvi", "reip", "rvi")
names(rasters) = layernames
layernames = layernames[8:9]
rasters = list(rasters[[8]], rasters[[9]]) %>% `names<-`(layernames)
rasters
layernames
# metadata
col_class = "class_simple"
col_id = "id"
dstdir = "03_develop/extract/"
outfiles = sapply(layernames, function(x) paste("extract", x, sep = "_"))
outfile = "test"
# median is calculated anyways; must be coercable by exact_extract()
statistics = c("mean", "stdev", "count")
outfiles
statistics
map2(outfiles, rasters, function(x, y){
cat(x)
exactextracting(gt = gt, ras = y,
col_class = "class_simple",
col_id = "id",
statistics = statistics,
dstdir = dstdir,
outfile = x)
})
