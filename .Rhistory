View(df)
# integrate date to dataset: making time series
# hereby the table needs to be transposed temporarily as `xts()` orders by rows
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
t() %>%
as.data.frame()
head(date_df)
?head()
?head
head(date_df, 5)
head(date_df, 0)
head(date_df, 1)
head(date_df, 5)
head(date_df[, 1:5], 5)
head(date_df[, 1:2], 5)
head(date_df[, 1:2], 10)
tail(date_df[, -1]), 10)
tail(date_df[, 1]), 10)
tail(date_df, 10)
tail(date_df[1], 10)
plot(date_df, axes = TRUE)
plot(date_df, axis = TRUE)
plot(date_df)
plot(date_df, add = FALSE)
plot(date_df[1], add = FALSE)
plot(date_df[3], add = FALSE)
plot(date_df[5], add = FALSE)
plot(date_df[1:10], add = FALSE)
View(df)
View(date_grouped_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t()
View(date_grouped_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
dplyr::transmute(mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
dplyr::mutate(mean)
?mutate
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
dplyr::mutate(mean, na.rm = TRUE)
CLASS(df)
class(df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
dplyr::mutate(mean, na.rm = TRUE)
??cowplot
?mapply(function, ...)
?map
library(purrr)
View(date_grouped_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
purrr::map_dbl(mean)
View(date_grouped_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
purrr::map(mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
map(mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
map(mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
map_df(mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
map_df(mean)
df
# convert to dataframe
df = as.data.frame(subset)
# load required packages
library(raster)
library(dplyr)
library(reshape2)
library(rgdal)
library(ggplot2)
library(openair)
library(readxl)
library(scales)
library(cowplot)
library(rts)
library(sf)
library(purrr)
s1_path = "D:\\Geodaten\\#Jupiter\\GEO402\\01_data\\s1_data\\S1_A_D_VH_free_state_study_area_geo402"
s1 = brick(s1_path)
crs(s1)
ncell(s1)
dim(s1)
res(s1)
n = nlayers(s1)
roi_path = "D:\\Geodaten\\#Jupiter\\GEO402\\02_features\\ROI_updated.kml"
# make spatial subset with ROI bounds
roi = readOGR(roi_path, "ROI_updated")
class(roi)
crs(roi)
plot(roi, axes = TRUE, col="blue")
sf_roi = roi %>%
st_as_sf() %>%
st_transform(st_crs(s1))
# get object with name = 1
roi_increase = sf_roi %>%
filter(sf_roi$Name == 1)
plot(roi_increase[1,1], main = "Increase")
# here: iteration through polygons and writing to df
#
subset = extract(s1, roi_increase[1,1])
# convert to dataframe
df = as.data.frame(subset)
# convert band names to date
bandnames = names(df)
# iterate for date in column-names
for (i in bandnames){
date = substr(bandnames,13,20)
}
# convert date string into R date-time format
date_s1 = c()
for (i in 1:length(date)){
date_s1 <- append(date_s1, as.POSIXct(date[i], format = "%Y%m%d")) #https://www.statmethods.net/input/dates.html
}
date_s1
# integrate date to dataset: making time series
# hereby the table needs to be transposed temporarily as `xts()` orders by rows
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
t() %>%
as.data.frame()
df
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
map_df(mean)
View(date_grouped_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
map_df(mean)
View(date_grouped_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
map_df(mean)
View(date_grouped_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
transmute(mean = map_df(mean))
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
transmute(mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
library(dplyr)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
# integrate date to dataset: making time series
# hereby the table needs to be transposed temporarily as `xts()` orders by rows
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
t() %>%
as.data.frame()
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
source('D:/Geodaten/#Jupiter/GEO402/project/402slangbos/import_parse.R', echo=TRUE)
# integrate date to dataset: making time series
# hereby the table needs to be transposed temporarily as `xts()` orders by rows
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
t() %>%
as.data.frame()
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_grouped_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
a = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
a
View(a)
map(a, mean)
map_df(a, mean)
map_df(a, median)
map_dbl(a, median)
map(a)
map(a, a*2)
map_dbl(a, a*2)
map_df(a, a*2)
map_dbl(a, median)
head(a)
map_dbl(a, median)
source('D:/Geodaten/#Jupiter/GEO402/project/402slangbos/import_parse.R', echo=TRUE)
# shows first 10 pixel values of the first raster
head(date_df[, 1:2], 10)
plot(date_df[, 1])
date_df
View(date_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
t()
rownames(date_df)
colnames(date_df)
# shows first 10 pixel values of the first raster
head(date_df[, 1:2], 10)
ggplot(date_df)
View(date_df)
plot(date_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
rownames(date_df)
colnames(date_df)
# shows first 10 pixel values of the first raster
head(date_df[, 1:2], 10)
View(date_df)
ggplot(date_df, aes(x =)
# ggplot(date_df, aes(x =)
plot(date_df)
# ggplot(date_df, aes(x =)
plot(date_df)
# ggplot(date_df, aes(x =)
plot(date_df)
# shows first 10 pixel values of the first raster
head(date_df[, 1:2], 10)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1)
rownames(date_df)
colnames(date_df)
# shows first 10 pixel values of the first raster
head(date_df[, 1:2], 10)
View(date_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1)
rownames(date_df)
colnames(date_df)
# shows first 10 pixel values of the first raster
head(date_df[, 1:2], 10)
View(date_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
rownames(date_df)
colnames(date_df)
# shows first 10 pixel values of the first raster
head(date_df[, 1:2], 10)
View(date_df)
mutate(date_df, date = dates_s1)
mutate(date_df, date = date_s1)
# ggplot(date_df, aes(x =)
plot(date_df)
date_df %>%
mutate(date_df, date = date_s1) %>%
mutate(map(date_df[1:29] .f = mean))
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
rownames(date_df)
colnames(date_df)
date_df %>%
mutate(date_df, date = date_s1)
View(date_df)
date_df %>%
mutate(date_df, date = date_s1)
date_df %>%
mutate(date_df, date = date_s1)
a = date_df %>%
mutate(date_df, date = date_s1)
# convert date string into R date-time format
date_s1 = c()
for (i in 1:length(date)){
date_s1 <- append(date_s1, as.POSIXct(date[i], format = "%Y%m%d")) #https://www.statmethods.net/input/dates.html
}
date_s1
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
rownames(date_df)
colnames(date_df)
a = date_df %>%
mutate(date_df, date = date_s1)
roi_path = "D:\\Geodaten\\#Jupiter\\GEO402\\02_features\\ROI_updated.kml"
# make spatial subset with ROI bounds
roi = readOGR(roi_path, "ROI_updated")
class(roi)
crs(roi)
plot(roi, axes = TRUE, col="blue")
sf_roi = roi %>%
st_as_sf() %>%
st_transform(st_crs(s1))
# get object with name = 1
roi_increase = sf_roi %>%
filter(sf_roi$Name == 1)
plot(roi_increase[1,1], main = "Increase")
# subsetting (cutting out)
subset = extract(s1, roi_increase[1,1])
# convert to dataframe
df = as.data.frame(subset)
# convert band names to date
bandnames = names(df)
# iterate for date in column-names
for (i in bandnames){
date = substr(bandnames,13,20)
}
# convert date string into R date-time format
date_s1 = c()
for (i in 1:length(date)){
date_s1 <- append(date_s1, as.POSIXct(date[i], format = "%Y%m%d")) #https://www.statmethods.net/input/dates.html
}
date_s1
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame()
rownames(date_df)
colnames(date_df)
a = date_df %>%
mutate(date_df, date = date_s1)
a = date_df %>%
mutate(date = date_s1)
a
plot(x = date, y = date_df[, 1])
date_df[date]
date_df["date"]
date_df["date" == 2019]
class(date_df$date)
class(date_df$date[1])
date_df$V29
a$V29
a$date
colnames(date_df)
map(a[1:29] mean)
map(date_df, mean)
map(date_df mean)
map(a, mean)
a = letters[1:5]
a
map_chr(a, ~ "z")
map_chr(a, "z")
map_chr(a, ~ "z")
a %>%
map(3)
ggplot(a, aes(x = date, y = "V1"))
a = date_df %>%
mutate(date = date_s1)
ggplot(a, aes(x = date, y = "V1"))
a[, 1]
mean(a[, 1])
mean(a[40:, 1])
mean(a[40:100, 1])
is.na(a)
is.na(a[,1])
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit()
rownames(date_df)
colnames(date_df)
plot(x = date, y = date_df[, 1])
head(date_df[, 1:2], 10)
View(date_df)
mean(a)
ggplot(date_df, aes(x = date, y = "V1"))
ggplot(date_df, aes(x = date, y = 1))
ggplot(date_df, aes(x = date, y = date_df[1]))
ggplot(date_df, aes(x = date, y = date_df[, 1]))
mean(a)
map(date_df, mean)
date_df[, -1]
date_df[, :-1]
date_df[, -1]
date_df[, -length(date_df)]
map(date_df[, -length(date_df)], mean)
stats = date_df %>%
map(date_df[, -length(date_df)], mean)
stats = date_df %>%
map(date_df[, -length(date_df)], mean)
map_dfr(date_df[, -length(date_df)], mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit() %>%
t()
rownames(date_df)
colnames(date_df)
head(date_df[, 1:2], 10)
View(date_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit() %>%
map_dfr(date_df[, -length(date_df)], mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit() %>%
map_dfr(date_df[, -length(date_df)], mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit() %>%
map_dfr(date_df[, -length(date_df)], mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit() %>%
map(date_df[, -length(date_df)], mean)
rownames(date_df)
colnames(date_df)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit() %>%
map(date_df[, -length(date_df)], mean)
# calculating the mean and margins (stdev), one transposition needed here (better this way?)
date_df = df %>%
t() %>%
xts(order.by = date_s1) %>%
as.data.frame() %>%
mutate(date = date_s1) %>%
na.omit()
map(date_df[, -length(date_df)], mean)
rownames(date_df)
colnames(date_df)
head(date_df[, 1:2], 10)
ggplot(date_df, aes(x = date, y = date_df[, 1]))
ggplot(date_df, aes(x = "date", y = date_df[, 1]))
date
ggplot(date_df, aes(x = date, y = date_df[, 1]))
is.na(a[,1])
