function(x) append(x, "X"))
diff = list(setdiff(ct$ct1, ct$ct2), setdiff(ct$ct2, ct$ct3), setdiff(ct$ct1, ct$ct3))
print(diff)
map(crops, function(x) plot(x))
# number of observations:
map(crops, function(x) nrow(x))
centroids = map(crops, function(x) st_centroid(x))
names = c("CATNAME_1" ,"AREA_HA", "FIELD_ID", "CropType_1415", "CropType_1516", "CropType_1617", "geom")
names = c("CropType_1415", "CropType_1516", "CropType_1617")
join = crop_boundaries
for (i in seq_along(centroids)){
print(i)
join = st_join(join, centroids[[i]], join = st_contains)
names(join)[length(names(join)) - 1] =  names[i]
}
join
# through out equal features
filtered = filter(join, !st_equals(join, sparse = FALSE)[1,])
filtered
ct = map(list(ct1 = unique(crop1415$CropType),
ct2 = unique(crop1516$CropType),
ct3 = unique(crop1617$CropType)),
function(x) append(x, "X"))
ct
# get geometry column
sfc = st_geometry(data)
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
# WITH NA ----------------------------------------------------------------------
data = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropIntersect") %>%
replace_na(list(CropType_1415 = "X", CropType_1516 = "X", CropType_1617 = "X"))
ct = map(list(ct1 = unique(crop1415$CropType),
ct2 = unique(crop1516$CropType),
ct3 = unique(crop1617$CropType)),
function(x) append(x, "X"))
# get geometry column
sfc = st_geometry(data)
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
data
# WITH NA ----------------------------------------------------------------------
data = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropIntersect") %>%
replace_na(list(CropType_1415 = "X", CropType_1516 = "X", CropType_1617 = "X"))
data
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
data
ct = map(list(ct1 = unique(crop1415$CropType),
ct2 = unique(crop1516$CropType),
ct3 = unique(crop1617$CropType)),
function(x) append(x, "X"))
# get geometry column
sfc = st_geometry(data)
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
data
# all possible crop changes as dataframe (land use change = luc)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
count(classified, description, sort = TRUE) # without missing values
table_real = data %>%
`colnames<-`(c("a", "b", "c"))
use_real = luc_cat %>%
map_df(., ~ as.factor(.x))
# run classification
classified = cbind(table_real, cat = TRAMPR::classify(table_real, use_real))
classified
st_geometry(classified) = sfc
classified
# add description column
classifiedNA = mutate(classified, description = paste(a, b, c, sep = "-"))
classifiedNA
# RESULTS ----------------------------------------------------------------------
count(classifiedNA, description, sort = TRUE) %>% print(n=50) # with missing values
crop.classif = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedComplexWithNA")
crop.classif
count(crop.classif, description, sort = TRUE) %>% print(n=50)
count(as.data.frame(crop.classif), description, sort = TRUE) %>% print(n=50)
as.data.frame(crop.classif)
count(as.data.frame(crop.classif), description, sort = TRUE) %>% print(n=50)
count(as.data.frame(crop.classif), description, sort = TRUE)
crop.classif %>%
as.data.frame %>%
count(description)
crop.classif %>%
as.data.frame %>%
count(description, sort = TRUE)
# counts of each catergory
crop.classif %>%
as.data.frame %>%
count(description, sort = TRUE)
# counts of each catergory
crop.classif %>%
as.data.frame %>%
count(description, sort = TRUE) %>% View
data = crop.classif
# get geometry column
sfc = st_geometry(data)
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
data
data = data %>%
as.data.frame() %>%
select(1:3) %>%
map_df(function(x) as.factor(x))
data
data = crop.inter
# Spatial Join of croptypes with boundary data ---------------------------------
crop.inter = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropIntersect") %>%
replace_na(list(CropType_1415 = "X", CropType_1516 = "X", CropType_1617 = "X"))
crop.inter
data = crop.inter
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
# get geometry column
sfc = st_geometry(data)
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
data
data = crop.inter
# get geometry column
sfc = st_geometry(data)
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x))
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = list("Pasture", "Arable", "Fallow", "X")
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
luc_cat = tidyr::expand_grid(ct)
print(luc_cat, n = 50)
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = c("Pasture", "Arable", "Fallow", "X")
luc_cat = tidyr::expand_grid(ct)
print(luc_cat, n = 50)
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(c("Pasture", "Arable", "Fallow", "X"), 3)
luc_cat = tidyr::expand_grid(ct)
print(luc_cat, n = 50)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(c("Pasture", "Arable", "Fallow", "X"), 3)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
ct
print(luc_cat, n = 50)
ct[[1]]
ct
luc_cat = tidyr::expand_grid(a = ct[1], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
table_real = data %>%
`colnames<-`(c("a", "b", "c"))
# fetch only cropdata columns for comparing with look-up table
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x)) %>%
`colnames<-`(c("a", "b", "c"))
data = crop.inter
# get geometry column
sfc = st_geometry(data)
# fetch only cropdata columns for comparing with look-up table
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x)) %>%
`colnames<-`(c("a", "b", "c"))
data
crop.inter
ct = map(list(ct1 = unique(crop1415$CropType),
ct2 = unique(crop1516$CropType),
ct3 = unique(crop1617$CropType)),
function(x) append(x, "X"))
ct
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(c("Pasture", "Arable", "Fallow", "X"), 3)
ct
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(list("Pasture", "Arable", "Fallow", "X"), 3)
ct
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(list(c("Pasture", "Arable", "Fallow", "X")), 3)
ct
luc_cat = tidyr::expand_grid(a = ct[1], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
data
data %>%
case_when(x = "Pasture" ~ "right")
?case_when
data %>%
case_when(x == "Pasture" ~ "right")
data %>%
case_when(T ~ "right")
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops")
}
map(data, function(x) reclassify(x))
map_df(data, function(x) reclassify(x))
dta
data
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops")
}
map_df(data, function(x) reclassify(x))
map_df(data, function(x) reclassify(x)) %>% print(n=50)
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
}
map_df(data, function(x) reclassify(x)) %>% print(n=50)
data = st_set_geometry(sfc)
data = st_set_geometry(data, sfc)
data
st_write(data, "02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified", delete_layer = TRUE)
luc
luc_cat
data
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
}
data = map_df(data, function(x) reclassify(x))
data = crop.inter
# get geometry column
sfc = st_geometry(data)
# fetch only cropdata columns for comparing with look-up table
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x)) %>%
`colnames<-`(c("a", "b", "c"))
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(list(c("Pasture", "Arable", "Fallow", "X")), 3)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]])
print(luc_cat, n = 50)
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
}
data = map_df(data, function(x) reclassify(x))
data
data %>% print(n=50)
out = st_set_geometry(data, sfc)
out
print(out, n=50)
out = st_set_geometry(data, sfc)
out
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified", delete_layer = TRUE)
data
luc_cat
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]]) %>%
map_df(., ~ as.factor(.x))
print(luc_cat, n = 50)
data
data = map_df(data, function(x) reclassify(x)) %>% map_df(., ~ as.factor(.x))
data
out = st_set_geometry(data, sfc)
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified", delete_layer = TRUE)
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified
out
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropIntersectSimplified", delete_layer = TRUE)
classified = mutate(classified, description = paste(a, b, c, sep = "-"))
classified
# Spatial Join of croptypes with boundary data ---------------------------------
crop.inter = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropIntersect") %>%
replace_na(list(CropType_1415 = "X", CropType_1516 = "X", CropType_1617 = "X"))
# contains NA data of LandCare
crop.classif = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedComplexWithNA")
# counts of each catergory
crop.classif %>%
as.data.frame %>%
count(description, sort = TRUE) %>% View
# counts of each catergory
crop.classif %>%
as.data.frame %>%
count(description, sort = TRUE)
data = crop.inter
# Spatial Join of croptypes with boundary data ---------------------------------
crop.inter = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropIntersect") %>%
replace_na(list(CropType_1415 = "X", CropType_1516 = "X", CropType_1617 = "X"))
# contains NA data of LandCare
crop.classif = st_read("02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedComplexWithNA")
# counts of each category, `complex`
crop.classif %>%
as.data.frame %>%
count(description, sort = TRUE)
data = crop.inter
# get geometry column
sfc = st_geometry(data)
# fetch only cropdata columns for comparing with look-up table
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x)) %>%
`colnames<-`(c("a", "b", "c"))
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(list(c("Pasture", "Arable", "Fallow", "X")), 3)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]]) %>%
map_df(., ~ as.factor(.x))
print(luc_cat, n = 50)
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
}
data = map_df(data, function(x) reclassify(x)) %>% map_df(., ~ as.factor(.x))
# write out simplified categories
out = st_set_geometry(data, sfc)
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropIntersectSimplified", delete_layer = TRUE)
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified = mutate(classified, description = paste(a, b, c, sep = "-"))
classified
luc_cat
data
print(data)
print(data, n=50)
luc_cat
data = map_df(data, function(x) reclassify(x)) %>% map_df(., ~ as.factor(.x))
data
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified
luc_cat
classified
luc_cat
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(list(c("Pasture", "Crops", "Fallow", "X")), 3)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]]) %>%
map_df(., ~ as.factor(.x))
print(luc_cat, n = 50)
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
}
data = map_df(data, function(x) reclassify(x)) %>% map_df(., ~ as.factor(.x))
# write out simplified categories
out = st_set_geometry(data, sfc)
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropIntersectSimplified", delete_layer = TRUE)
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified = mutate(classified, description = paste(a, b, c, sep = "-"))
classified
luc_cat
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]]) %>%
map_df(., ~ as.factor(.x))
print(luc_cat, n = 50)
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
}
data = map_df(data, function(x) reclassify(x)) %>% map_df(., ~ as.factor(.x))
# write out simplified categories
out = st_set_geometry(data, sfc)
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropIntersectSimplified", delete_layer = TRUE)
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified
data
classified
data
print(data, n=50)
data = crop.inter
# get geometry column
sfc = st_geometry(data)
# fetch only cropdata columns for comparing with look-up table
data = data %>%
as.data.frame() %>%
select(4:6) %>%
map_df(function(x) as.factor(x)) %>%
`colnames<-`(c("a", "b", "c"))
# all possible crop changes as dataframe (land use change = luc)
# ct = croptypes possible
ct = rep(list(c("Pasture", "Crops", "Fallow", "X")), 3)
luc_cat = tidyr::expand_grid(a = ct[[1]], b = ct[[2]], c = ct[[3]]) %>%
map_df(., ~ as.factor(.x))
print(luc_cat, n = 50)
# reclassify data
reclassify = function(x){
case_when(x == "Maize" ~ "Crops",
x == "Sunflower" ~ "Crops",
x == "SoyaBeans" ~ "Crops",
x == "Wheat" ~ "Crops",
x == "Groundnuts" ~ "Crops",
x == "Sorghum" ~ "Crops",
x == "Pasture" ~ "Pasture",
x == "Fallow" ~ "Fallow",
x == "X" ~ "X")
}
data = map_df(data, function(x) reclassify(x)) %>% map_df(., ~ as.factor(.x))
print(data, n=50)
# write out simplified categories
out = st_set_geometry(data, sfc)
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropIntersectSimplified", delete_layer = TRUE)
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified = mutate(classified, description = paste(a, b, c, sep = "-"))
classified
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified = mutate(classified, description = paste(a, b, c, sep = "-"))
# write out simplified classification
out = st_set_geometry(data, sfc)
classified
sfc
# run classification
classified = cbind(data, cat = TRAMPR::classify(data, luc_cat))
classified = mutate(classified, description = paste(a, b, c, sep = "-"))
# write out simplified classification
out = st_set_geometry(data, sfc)
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified", delete_layer = TRUE)
out
# write out simplified classification
out = st_set_geometry(classified, sfc)
st_write(out, "02_features/Ladybrand_CropData.gpkg", layer = "CropClassifiedSimplified", delete_layer = TRUE)
