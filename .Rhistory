stelle = 1
code = 1
# get gt
example = gt %>%
filter(gt$Name == code) %>%
.[stelle, ]
plot(example[1], main = paste0(namer(code), ": ", code, "_", stelle), col = "grey")
plot(s1vv[[1]], add = T)
vv
vv[1]
vv[[1]]
vv[[2]]
vh = vh
grep = function(summary = vv, stelle = 1, code = 1){
grep = summary[grepl(paste0("plot", code, "_"), names(summary))]
# indexing
fetched = grep[[stelle]]
# remove na
ready = na.omit(fetched)
nrow(ready)
return(ready)
}
# get data for the double plot
agro = grep(summary = vh, stelle = 2, code = 4)
incr = grep(summary = vh, stelle = 1, code = 1)
brk = grep(summary = vh, stelle = 2, code = 12)
identical(nrow(agro),nrow(incr))
identical(nrow(agro),nrow(brk))
# Agro
x_1 = agro$date
med_1 = agro$median
upsd_1 = agro$lower_sd
losd_1 = agro$upper_sd
# Increase
x_2 = incr$date
med_2 = incr$median
upsd_2 = incr$lower_sd
losd_2 = incr$upper_sd
# Breakpoint
x_3 = brk$date
med_3 = brk$median
upsd_3 = brk$lower_sd
losd_3 = brk$upper_sd
# curve smoothing---------------------------------------------------------------
pr_1 = supsmu(x_1, med_1) # smoothing curve
pr_2 = supsmu(x_2, med_2)
pr_3 = supsmu(x_3, med_3)
pr_losd_1 = supsmu(x_1, losd_1) # making smoothed line for standard deviation
pr_upsd_1 = supsmu(x_1, upsd_1)
pr_losd_2 = supsmu(x_2, losd_2)
pr_upsd_2 = supsmu(x_2, upsd_2)
pr_losd_3 = supsmu(x_3, losd_3)
pr_upsd_3 = supsmu(x_3, upsd_3)
# Colours-----------------------------------------------------------------------
mycolour = (20)
blue_backgroud = "#6ec3f7"
red_background = "#fc8d59"
black_background = "#333333"
# Format edits
data.fmt = list(color="#878787", width=1)
line_1.fmt = list(dash="solid", width = 0.5, color="#b6e1fb") # blue
pr_1.fmt = list(dash="solid", width = 1.5, color="#2c6487")
line_2.fmt = list(dash="solid", width = 0.5, color="#fc8d59") # red
pr_2.fmt = list(dash="solid", width = 1.5, color="#fa5305")
line_3.fmt = list(dash="solid", width = 0.5, color="#333333")
pr_3.fmt = list(dash="dot", width = 1, color="#333333")
interval.fmt = list(dash="dot", width = 1, color="grey")
# Axes
f1 <- list(
family = "Arial, sans-serif",
size = 15,
color = "grey"
)
f2 <- list(
family = "Arial, sans-serif",
size = 17,
color = "grey90"
)
x_axis <- list(
title = "Date",
titlefont = f2,
tickfont = f1,
showticklabels = TRUE,
range = c(min(x_1), max(x_1))
)
y_axis <- list(
title = "Sentinel-1 VH backscatter (median of polygon area)",
titlefont = f2,
tickfont = f1,
showticklabels = TRUE,
exponentformat = "E",
range = c(min(agro$median) - 3, max(agro$median) + 3)
)
plt = plot_ly(data = agro,
x = ~date,
y = ~median,
width = 600,
height = 600) %>%
layout(title = "",
yaxis = y_axis,
xaxis = x_axis,
legend = list(font = f1, traceorder = "reversed", yanchor = "top",
xanchor = "right")) %>%
add_ribbons(x = x_1,
ymin = pr_losd_1$y,
ymax = pr_upsd_1$y,
color = I(blue_backgroud), line = list(width = 0), opacity = 0.4,
name = "",
showlegend = FALSE) %>%
add_ribbons(x = x_2,
ymin = pr_losd_2$y,
ymax = pr_upsd_2$y,
color = I(red_background), line = list(width = 0), opacity = 0.4,
name = "",
showlegend = FALSE) %>%
add_lines(x = x_1, y = pr_1$y, line = pr_1.fmt, name = "Agriculture") %>% # median
add_lines(x = x_2, y = pr_2$y, line = pr_2.fmt, name = "Slangbos site") %>%
add_lines(x = x_3, y = pr_3$y, line = pr_3.fmt, name = "Slangbos burnt site")
plt
agro
my.packages = c("raster", "sf", "rgdal", "caret", "cast")
lapply(my.packages, require, character.only = TRUE)
source("import.R")
agro
agro$count[1]
incr$count[1]
brk$count[1]
incr
brk
plt = plot_ly(data = agro,
x = ~date,
y = ~median,
width = 600,
height = 600) %>%
layout(title = "",
yaxis = y_axis,
xaxis = x_axis,
legend = list(font = f1, traceorder = "reversed", yanchor = "top",
xanchor = "right")) %>%
add_ribbons(x = x_1,
ymin = pr_losd_1$y,
ymax = pr_upsd_1$y,
color = I(blue_backgroud), line = list(width = 0), opacity = 0.4,
name = "",
showlegend = FALSE) %>%
add_ribbons(x = x_2,
ymin = pr_losd_2$y,
ymax = pr_upsd_2$y,
color = I(red_background), line = list(width = 0), opacity = 0.4,
name = "",
showlegend = FALSE) %>%
add_lines(x = x_1, y = pr_1$y, line = pr_1.fmt, name = "Agriculture") %>% # median
add_lines(x = x_2, y = pr_2$y, line = pr_2.fmt, name = "Slangbos increase site") %>%
add_lines(x = x_3, y = pr_3$y, line = pr_3.fmt, name = "Slangbos burnt site")
plt
---
title: "Slangbos encroachment - Mini Paper"
author: "Konstantin Schellenberg"
date: "`r format(Sys.time(), '%B %e, %Y')`"
output: bookdown::
html_document2
bibliography: [slangbos.bib, refs.bib]
biblio-style: apalike
always_allow_html: true
---
title: "Slangbos encroachment - Mini Paper"
author: "Konstantin Schellenberg"
date: "`r format(Sys.time(), '%B %e, %Y')`"
output:
bookdown::html_document2
bibliography: [slangbos.bib, refs.bib]
biblio-style: apalike
always_allow_html: true
---
plt = plot_ly(data = agro,
x = ~date,
y = ~median,
width = 600,
height = 600) %>%
layout(title = "",
yaxis = y_axis,
xaxis = x_axis,
legend = list(font = f1, traceorder = "reversed", yanchor = "top",
xanchor = "right")) %>%
add_ribbons(x = x_1,
ymin = pr_losd_1$y,
ymax = pr_upsd_1$y,
color = I(blue_backgroud), line = list(width = 0), opacity = 0.4,
name = "",
showlegend = FALSE) %>%
add_ribbons(x = x_2,
ymin = pr_losd_2$y,
ymax = pr_upsd_2$y,
color = I(red_background), line = list(width = 0), opacity = 0.4,
name = "",
showlegend = FALSE) %>%
add_lines(x = x_1, y = pr_1$y, line = pr_1.fmt, name = "Agriculture") %>% # median
add_lines(x = x_2, y = pr_2$y, line = pr_2.fmt, name = "Slangbos increase site") %>%
add_lines(x = x_3, y = pr_3$y, line = pr_3.fmt, name = "Slangbos burnt site")
plt
source('D:/Geodaten/Master/projects/402slangbos/data_analysis.R', echo=TRUE)
saveRDS(vv, "data/vv.rds")
saveRDS(vh, "data/vh.rds")
if (!file.exists("data/vv.rds")) {
vv = list_summaries(sentinel1_brick = s1vv,
polygon = gt)
} else {
readRDS("data/vv.rds")
}
if (!file.exists("data/vh.rds")) {
vh = list_summaries(sentinel1_brick = s1vh,
polygon = gt)
} else {
vh = readRDS("data/vh.rds")
}
if (!file.exists("data/vv.rds")) {
vv = list_summaries(sentinel1_brick = s1vv,
polygon = gt)
} else {
vv = readRDS("data/vv.rds")
}
if (!file.exists("data/vh.rds")) {
vh = list_summaries(sentinel1_brick = s1vh,
polygon = gt)
} else {
vh = readRDS("data/vh.rds")
}
# debug: check if different
if(identical(vv$plot1_1$median,
vh$plot1_1$median)){
warning("the input raster are the same")
}
if (!file.exists("data/vv.rds")) {
vv = list_summaries(sentinel1_brick = s1vv,
polygon = gt)
saveRDS(vv, "data/vv.rds")
} else {
vv = readRDS("data/vv.rds")
}
if (!file.exists("data/vh.rds")) {
vh = list_summaries(sentinel1_brick = s1vh,
polygon = gt)
saveRDS(vh, "data/vh.rds")
} else {
vh = readRDS("data/vh.rds")
}
# debug: check if different
if(identical(vv$plot1_1$median,
vh$plot1_1$median)){
warning("the input raster are the same")
}
source('D:/Geodaten/Master/projects/402slangbos/data_analysis.R', echo=TRUE)
# built-in function for naming gts
namer <<- function(code){
codename = ""
# looping for plotting name
if (code == 1) {
codename = "Increase"
}
if (code == 2) {
codename = "Cleaned"
}
if (code == 12) {
codename = "Increase, then cleaned"
}
if (code == 3) {
codename = "Continuous"
}
if (code == 4) {
codename = "Agriculture"
}
return(codename)
}
namer
namer(1)
# built-in function for naming gts
namer = function(code){
codename = ""
# looping for plotting name
if (code == 1) {
codename = "Increase"
}
if (code == 2) {
codename = "Cleaned"
}
if (code == 12) {
codename = "Increase, then cleaned"
}
if (code == 3) {
codename = "Continuous"
}
if (code == 4) {
codename = "Agriculture"
}
return(codename)
}
namer
# built-in function for naming gts
namer <<- function(code){
codename = ""
# looping for plotting name
if (code == 1) {
codename = "Increase"
}
if (code == 2) {
codename = "Cleaned"
}
if (code == 12) {
codename = "Increase, then cleaned"
}
if (code == 3) {
codename = "Continuous"
}
if (code == 4) {
codename = "Agriculture"
}
return(codename)
}
namer
source("import.R")
plt
source("data_analysis.R")
plt
# Chunk 1
my.packages = c("raster", "sf", "rgdal", "caret", "cast")
lapply(my.packages, require, character.only = TRUE)
source("data_analysis.R")
# Chunk 2
knitr::write_bib(my.packages,
file = "refs.bib",
prefix = "R-"
)
plt
my.packages = c("raster", "sf", "rgdal", "caret", "mlr")
lapply(my.packages, require, character.only = TRUE)
source("data_analysis.R")
plt
# Chunk 1
my.packages = c("raster", "sf", "rgdal", "caret", "mlr")
lapply(my.packages, require, character.only = TRUE)
source("data_analysis.R")
# Chunk 2
knitr::write_bib(my.packages,
file = "refs.bib",
prefix = "R-"
)
plt
source("data_analysis.R")
source('D:/Geodaten/Master/projects/402slangbos/raster_functions.R', echo=TRUE)
source('D:/Geodaten/Master/projects/402slangbos/import.R', echo=TRUE)
source('D:/Geodaten/Master/projects/402slangbos/data_analysis.R', echo=TRUE)
namer
carve_brick = function(sentinel1_brick,
polygon,
code = 1,
gt_example_no = 1){
# built-in function for naming gts
namer <<- function(code){
codename = ""
# looping for plotting name
if (code == 1) {
codename = "Increase"
}
if (code == 2) {
codename = "Cleaned"
}
if (code == 12) {
codename = "Increase, then cleaned"
}
if (code == 3) {
codename = "Continuous"
}
if (code == 4) {
codename = "Agriculture"
}
return(codename)
}
# filtering code
gt_code = filter(polygon, polygon$Name == code)
# indexing single object
single_gt = gt_code[gt_example_no, 1]
# spatial subset with single gt bounds
subset = raster::extract(sentinel1_brick, single_gt) %>%
as.data.frame()
# convert band names to date
bandnames = names(subset)
# iterate for date in column-names
for (i in bandnames){
date = substr(bandnames,13,20)
}
# convert date string into R date-time format
date_s1 = c()
for (i in 1:length(date)){
date_s1 <- append(date_s1, as.POSIXct(date[i], format = "%Y%m%d")) #https://www.statmethods.net/input/dates.html
}
####
datenames <<- date_s1
# integrate date to dataset: making time series
# calculating the mean and margins (stdev), one transposition t() needed here
df_date = subset %>%
t() %>%
as.data.frame() %>%
mutate(date = date_s1) #%>%
# na.omit()
df = pivot_longer(df_date,
-date,
names_to = "names",
values_to = "values"
)
df_summary = df %>%
group_by(date) %>%
summarise(mean = mean(values),
median = median(values),
sd = sd(values),
"lower_sd" = mean(values) - sd(values),
"upper_sd" = mean(values) + sd(values),
count = n())
# printing summary to console
paste = paste(
paste("Size of the plot:", st_area(single_gt[1,]), sep = " "),
paste("count of pixels in the timestack:", nrow(df), sep = " "),
paste("count of pixels in the polygon:", median(df_summary$count), sep = " "),
paste("gt of type: ", namer(code), sep = " "),
paste("median = ", mean(df_summary$median, na.rm = TRUE), sep = " "),
paste("mean = ", mean(df_summary$mean, na.rm = TRUE), sep = " "),
paste("standard deviation = ", mean(df_summary$sd, na.rm = TRUE), "\n", sep = " "),
sep = "\n")
####
cat(paste)
return(df_summary)
}
carve_brick = function(sentinel1_brick,
polygon,
code = 1,
gt_example_no = 1){
# built-in function for naming gts
namer <<- function(code){
codename = ""
# looping for plotting name
if (code == 1) {
codename = "Increase"
}
if (code == 2) {
codename = "Cleaned"
}
if (code == 12) {
codename = "Increase, then cleaned"
}
if (code == 3) {
codename = "Continuous"
}
if (code == 4) {
codename = "Agriculture"
}
return(codename)
}
# filtering code
gt_code = filter(polygon, polygon$Name == code)
# indexing single object
single_gt = gt_code[gt_example_no, 1]
# spatial subset with single gt bounds
subset = raster::extract(sentinel1_brick, single_gt) %>%
as.data.frame()
# convert band names to date
bandnames = names(subset)
# iterate for date in column-names
for (i in bandnames){
date = substr(bandnames,13,20)
}
# convert date string into R date-time format
date_s1 = c()
for (i in 1:length(date)){
date_s1 <- append(date_s1, as.POSIXct(date[i], format = "%Y%m%d")) #https://www.statmethods.net/input/dates.html
}
####
datenames <<- date_s1
# integrate date to dataset: making time series
# calculating the mean and margins (stdev), one transposition t() needed here
df_date = subset %>%
t() %>%
as.data.frame() %>%
mutate(date = date_s1) #%>%
# na.omit()
df = pivot_longer(df_date,
-date,
names_to = "names",
values_to = "values"
)
df_summary = df %>%
group_by(date) %>%
summarise(mean = mean(values),
median = median(values),
sd = sd(values),
"lower_sd" = mean(values) - sd(values),
"upper_sd" = mean(values) + sd(values),
count = n())
# printing summary to console
paste = paste(
paste("Size of the plot:", st_area(single_gt[1,]), sep = " "),
paste("count of pixels in the timestack:", nrow(df), sep = " "),
paste("count of pixels in the polygon:", median(df_summary$count), sep = " "),
paste("gt of type: ", namer(code), sep = " "),
paste("median = ", mean(df_summary$median, na.rm = TRUE), sep = " "),
paste("mean = ", mean(df_summary$mean, na.rm = TRUE), sep = " "),
paste("standard deviation = ", mean(df_summary$sd, na.rm = TRUE), "\n", sep = " "),
sep = "\n")
####
cat(paste)
return(df_summary)
}
source("data_analysis.R")
plt
